// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: handsfree/handsfree.proto

package handsfreeconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	handsfree "github.com/infinimesh/proto/handsfree"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// HandsfreeServiceName is the fully-qualified name of the HandsfreeService service.
	HandsfreeServiceName = "infinimesh.handsfree.HandsfreeService"
)

// HandsfreeServiceClient is a client for the infinimesh.handsfree.HandsfreeService service.
type HandsfreeServiceClient interface {
	Send(context.Context, *connect_go.Request[handsfree.ControlPacket]) (*connect_go.Response[handsfree.ControlPacket], error)
	Connect(context.Context, *connect_go.Request[handsfree.ConnectionRequest]) (*connect_go.ServerStreamForClient[handsfree.ControlPacket], error)
}

// NewHandsfreeServiceClient constructs a client for the infinimesh.handsfree.HandsfreeService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewHandsfreeServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) HandsfreeServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &handsfreeServiceClient{
		send: connect_go.NewClient[handsfree.ControlPacket, handsfree.ControlPacket](
			httpClient,
			baseURL+"/infinimesh.handsfree.HandsfreeService/Send",
			opts...,
		),
		connect: connect_go.NewClient[handsfree.ConnectionRequest, handsfree.ControlPacket](
			httpClient,
			baseURL+"/infinimesh.handsfree.HandsfreeService/Connect",
			opts...,
		),
	}
}

// handsfreeServiceClient implements HandsfreeServiceClient.
type handsfreeServiceClient struct {
	send    *connect_go.Client[handsfree.ControlPacket, handsfree.ControlPacket]
	connect *connect_go.Client[handsfree.ConnectionRequest, handsfree.ControlPacket]
}

// Send calls infinimesh.handsfree.HandsfreeService.Send.
func (c *handsfreeServiceClient) Send(ctx context.Context, req *connect_go.Request[handsfree.ControlPacket]) (*connect_go.Response[handsfree.ControlPacket], error) {
	return c.send.CallUnary(ctx, req)
}

// Connect calls infinimesh.handsfree.HandsfreeService.Connect.
func (c *handsfreeServiceClient) Connect(ctx context.Context, req *connect_go.Request[handsfree.ConnectionRequest]) (*connect_go.ServerStreamForClient[handsfree.ControlPacket], error) {
	return c.connect.CallServerStream(ctx, req)
}

// HandsfreeServiceHandler is an implementation of the infinimesh.handsfree.HandsfreeService
// service.
type HandsfreeServiceHandler interface {
	Send(context.Context, *connect_go.Request[handsfree.ControlPacket]) (*connect_go.Response[handsfree.ControlPacket], error)
	Connect(context.Context, *connect_go.Request[handsfree.ConnectionRequest], *connect_go.ServerStream[handsfree.ControlPacket]) error
}

// NewHandsfreeServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewHandsfreeServiceHandler(svc HandsfreeServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/infinimesh.handsfree.HandsfreeService/Send", connect_go.NewUnaryHandler(
		"/infinimesh.handsfree.HandsfreeService/Send",
		svc.Send,
		opts...,
	))
	mux.Handle("/infinimesh.handsfree.HandsfreeService/Connect", connect_go.NewServerStreamHandler(
		"/infinimesh.handsfree.HandsfreeService/Connect",
		svc.Connect,
		opts...,
	))
	return "/infinimesh.handsfree.HandsfreeService/", mux
}

// UnimplementedHandsfreeServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedHandsfreeServiceHandler struct{}

func (UnimplementedHandsfreeServiceHandler) Send(context.Context, *connect_go.Request[handsfree.ControlPacket]) (*connect_go.Response[handsfree.ControlPacket], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("infinimesh.handsfree.HandsfreeService.Send is not implemented"))
}

func (UnimplementedHandsfreeServiceHandler) Connect(context.Context, *connect_go.Request[handsfree.ConnectionRequest], *connect_go.ServerStream[handsfree.ControlPacket]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("infinimesh.handsfree.HandsfreeService.Connect is not implemented"))
}
