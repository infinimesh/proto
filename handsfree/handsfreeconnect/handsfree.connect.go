//
//Copyright Â© 2021-2023 Infinite Devices GmbH, Nikita Ivanovski info@slnt-opp.xyz
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: handsfree/handsfree.proto

package handsfreeconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	handsfree "github.com/infinimesh/proto/handsfree"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// HandsfreeServiceName is the fully-qualified name of the HandsfreeService service.
	HandsfreeServiceName = "infinimesh.handsfree.HandsfreeService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// HandsfreeServiceSendProcedure is the fully-qualified name of the HandsfreeService's Send RPC.
	HandsfreeServiceSendProcedure = "/infinimesh.handsfree.HandsfreeService/Send"
	// HandsfreeServiceConnectProcedure is the fully-qualified name of the HandsfreeService's Connect
	// RPC.
	HandsfreeServiceConnectProcedure = "/infinimesh.handsfree.HandsfreeService/Connect"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	handsfreeServiceServiceDescriptor       = handsfree.File_handsfree_handsfree_proto.Services().ByName("HandsfreeService")
	handsfreeServiceSendMethodDescriptor    = handsfreeServiceServiceDescriptor.Methods().ByName("Send")
	handsfreeServiceConnectMethodDescriptor = handsfreeServiceServiceDescriptor.Methods().ByName("Connect")
)

// HandsfreeServiceClient is a client for the infinimesh.handsfree.HandsfreeService service.
type HandsfreeServiceClient interface {
	Send(context.Context, *connect.Request[handsfree.ControlPacket]) (*connect.Response[handsfree.ControlPacket], error)
	Connect(context.Context, *connect.Request[handsfree.ConnectionRequest]) (*connect.ServerStreamForClient[handsfree.ControlPacket], error)
}

// NewHandsfreeServiceClient constructs a client for the infinimesh.handsfree.HandsfreeService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewHandsfreeServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) HandsfreeServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &handsfreeServiceClient{
		send: connect.NewClient[handsfree.ControlPacket, handsfree.ControlPacket](
			httpClient,
			baseURL+HandsfreeServiceSendProcedure,
			connect.WithSchema(handsfreeServiceSendMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		connect: connect.NewClient[handsfree.ConnectionRequest, handsfree.ControlPacket](
			httpClient,
			baseURL+HandsfreeServiceConnectProcedure,
			connect.WithSchema(handsfreeServiceConnectMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// handsfreeServiceClient implements HandsfreeServiceClient.
type handsfreeServiceClient struct {
	send    *connect.Client[handsfree.ControlPacket, handsfree.ControlPacket]
	connect *connect.Client[handsfree.ConnectionRequest, handsfree.ControlPacket]
}

// Send calls infinimesh.handsfree.HandsfreeService.Send.
func (c *handsfreeServiceClient) Send(ctx context.Context, req *connect.Request[handsfree.ControlPacket]) (*connect.Response[handsfree.ControlPacket], error) {
	return c.send.CallUnary(ctx, req)
}

// Connect calls infinimesh.handsfree.HandsfreeService.Connect.
func (c *handsfreeServiceClient) Connect(ctx context.Context, req *connect.Request[handsfree.ConnectionRequest]) (*connect.ServerStreamForClient[handsfree.ControlPacket], error) {
	return c.connect.CallServerStream(ctx, req)
}

// HandsfreeServiceHandler is an implementation of the infinimesh.handsfree.HandsfreeService
// service.
type HandsfreeServiceHandler interface {
	Send(context.Context, *connect.Request[handsfree.ControlPacket]) (*connect.Response[handsfree.ControlPacket], error)
	Connect(context.Context, *connect.Request[handsfree.ConnectionRequest], *connect.ServerStream[handsfree.ControlPacket]) error
}

// NewHandsfreeServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewHandsfreeServiceHandler(svc HandsfreeServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	handsfreeServiceSendHandler := connect.NewUnaryHandler(
		HandsfreeServiceSendProcedure,
		svc.Send,
		connect.WithSchema(handsfreeServiceSendMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	handsfreeServiceConnectHandler := connect.NewServerStreamHandler(
		HandsfreeServiceConnectProcedure,
		svc.Connect,
		connect.WithSchema(handsfreeServiceConnectMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/infinimesh.handsfree.HandsfreeService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case HandsfreeServiceSendProcedure:
			handsfreeServiceSendHandler.ServeHTTP(w, r)
		case HandsfreeServiceConnectProcedure:
			handsfreeServiceConnectHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedHandsfreeServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedHandsfreeServiceHandler struct{}

func (UnimplementedHandsfreeServiceHandler) Send(context.Context, *connect.Request[handsfree.ControlPacket]) (*connect.Response[handsfree.ControlPacket], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("infinimesh.handsfree.HandsfreeService.Send is not implemented"))
}

func (UnimplementedHandsfreeServiceHandler) Connect(context.Context, *connect.Request[handsfree.ConnectionRequest], *connect.ServerStream[handsfree.ControlPacket]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("infinimesh.handsfree.HandsfreeService.Connect is not implemented"))
}
