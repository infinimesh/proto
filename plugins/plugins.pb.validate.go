// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: plugins/plugins.proto

package plugins

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Plugin with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Plugin) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Plugin with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in PluginMultiError, or nil if none found.
func (m *Plugin) ValidateAll() error {
	return m.validate(true)
}

func (m *Plugin) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uuid

	// no validation rules for Logo

	// no validation rules for Title

	// no validation rules for Description

	// no validation rules for Public

	// no validation rules for Kind

	if m.Namespace != nil {
		// no validation rules for Namespace
	}

	if m.Access != nil {

		if all {
			switch v := interface{}(m.GetAccess()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PluginValidationError{
						field:  "Access",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PluginValidationError{
						field:  "Access",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAccess()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PluginValidationError{
					field:  "Access",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.EmbeddedConf != nil {

		if all {
			switch v := interface{}(m.GetEmbeddedConf()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PluginValidationError{
						field:  "EmbeddedConf",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PluginValidationError{
						field:  "EmbeddedConf",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetEmbeddedConf()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PluginValidationError{
					field:  "EmbeddedConf",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.DeviceConf != nil {

		if all {
			switch v := interface{}(m.GetDeviceConf()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PluginValidationError{
						field:  "DeviceConf",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PluginValidationError{
						field:  "DeviceConf",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDeviceConf()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PluginValidationError{
					field:  "DeviceConf",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PluginMultiError(errors)
	}

	return nil
}

// PluginMultiError is an error wrapping multiple validation errors returned by
// Plugin.ValidateAll() if the designated constraints aren't met.
type PluginMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PluginMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PluginMultiError) AllErrors() []error { return m }

// PluginValidationError is the validation error returned by Plugin.Validate if
// the designated constraints aren't met.
type PluginValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PluginValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PluginValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PluginValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PluginValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PluginValidationError) ErrorName() string { return "PluginValidationError" }

// Error satisfies the builtin error interface
func (e PluginValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlugin.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PluginValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PluginValidationError{}

// Validate checks the field values on Plugins with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Plugins) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Plugins with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in PluginsMultiError, or nil if none found.
func (m *Plugins) ValidateAll() error {
	return m.validate(true)
}

func (m *Plugins) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPool() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PluginsValidationError{
						field:  fmt.Sprintf("Pool[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PluginsValidationError{
						field:  fmt.Sprintf("Pool[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PluginsValidationError{
					field:  fmt.Sprintf("Pool[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PluginsMultiError(errors)
	}

	return nil
}

// PluginsMultiError is an error wrapping multiple validation errors returned
// by Plugins.ValidateAll() if the designated constraints aren't met.
type PluginsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PluginsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PluginsMultiError) AllErrors() []error { return m }

// PluginsValidationError is the validation error returned by Plugins.Validate
// if the designated constraints aren't met.
type PluginsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PluginsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PluginsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PluginsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PluginsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PluginsValidationError) ErrorName() string { return "PluginsValidationError" }

// Error satisfies the builtin error interface
func (e PluginsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlugins.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PluginsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PluginsValidationError{}

// Validate checks the field values on EmbededPluginConf with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *EmbededPluginConf) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EmbededPluginConf with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EmbededPluginConfMultiError, or nil if none found.
func (m *EmbededPluginConf) ValidateAll() error {
	return m.validate(true)
}

func (m *EmbededPluginConf) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FrameUrl

	if len(errors) > 0 {
		return EmbededPluginConfMultiError(errors)
	}

	return nil
}

// EmbededPluginConfMultiError is an error wrapping multiple validation errors
// returned by EmbededPluginConf.ValidateAll() if the designated constraints
// aren't met.
type EmbededPluginConfMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EmbededPluginConfMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EmbededPluginConfMultiError) AllErrors() []error { return m }

// EmbededPluginConfValidationError is the validation error returned by
// EmbededPluginConf.Validate if the designated constraints aren't met.
type EmbededPluginConfValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EmbededPluginConfValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EmbededPluginConfValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EmbededPluginConfValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EmbededPluginConfValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EmbededPluginConfValidationError) ErrorName() string {
	return "EmbededPluginConfValidationError"
}

// Error satisfies the builtin error interface
func (e EmbededPluginConfValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEmbededPluginConf.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EmbededPluginConfValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EmbededPluginConfValidationError{}

// Validate checks the field values on DevicePluginConf with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DevicePluginConf) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DevicePluginConf with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DevicePluginConfMultiError, or nil if none found.
func (m *DevicePluginConf) ValidateAll() error {
	return m.validate(true)
}

func (m *DevicePluginConf) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ViewUrl

	// no validation rules for DesiredUrl

	if len(errors) > 0 {
		return DevicePluginConfMultiError(errors)
	}

	return nil
}

// DevicePluginConfMultiError is an error wrapping multiple validation errors
// returned by DevicePluginConf.ValidateAll() if the designated constraints
// aren't met.
type DevicePluginConfMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DevicePluginConfMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DevicePluginConfMultiError) AllErrors() []error { return m }

// DevicePluginConfValidationError is the validation error returned by
// DevicePluginConf.Validate if the designated constraints aren't met.
type DevicePluginConfValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DevicePluginConfValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DevicePluginConfValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DevicePluginConfValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DevicePluginConfValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DevicePluginConfValidationError) ErrorName() string { return "DevicePluginConfValidationError" }

// Error satisfies the builtin error interface
func (e DevicePluginConfValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDevicePluginConf.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DevicePluginConfValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DevicePluginConfValidationError{}

// Validate checks the field values on ListRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListRequestMultiError, or
// nil if none found.
func (m *ListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Namespace != nil {
		// no validation rules for Namespace
	}

	if len(errors) > 0 {
		return ListRequestMultiError(errors)
	}

	return nil
}

// ListRequestMultiError is an error wrapping multiple validation errors
// returned by ListRequest.ValidateAll() if the designated constraints aren't met.
type ListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRequestMultiError) AllErrors() []error { return m }

// ListRequestValidationError is the validation error returned by
// ListRequest.Validate if the designated constraints aren't met.
type ListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRequestValidationError) ErrorName() string { return "ListRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRequestValidationError{}
