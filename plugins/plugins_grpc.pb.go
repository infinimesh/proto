//
//Copyright Â© 2021-2023 Infinite Devices GmbH
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: plugins/plugins.proto

package plugins

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PluginsService_Get_FullMethodName    = "/infinimesh.plugins.PluginsService/Get"
	PluginsService_List_FullMethodName   = "/infinimesh.plugins.PluginsService/List"
	PluginsService_Create_FullMethodName = "/infinimesh.plugins.PluginsService/Create"
	PluginsService_Update_FullMethodName = "/infinimesh.plugins.PluginsService/Update"
	PluginsService_Delete_FullMethodName = "/infinimesh.plugins.PluginsService/Delete"
)

// PluginsServiceClient is the client API for PluginsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PluginsServiceClient interface {
	Get(ctx context.Context, in *Plugin, opts ...grpc.CallOption) (*Plugin, error)
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*Plugins, error)
	Create(ctx context.Context, in *Plugin, opts ...grpc.CallOption) (*Plugin, error)
	Update(ctx context.Context, in *Plugin, opts ...grpc.CallOption) (*Plugin, error)
	Delete(ctx context.Context, in *Plugin, opts ...grpc.CallOption) (*Plugin, error)
}

type pluginsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPluginsServiceClient(cc grpc.ClientConnInterface) PluginsServiceClient {
	return &pluginsServiceClient{cc}
}

func (c *pluginsServiceClient) Get(ctx context.Context, in *Plugin, opts ...grpc.CallOption) (*Plugin, error) {
	out := new(Plugin)
	err := c.cc.Invoke(ctx, PluginsService_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginsServiceClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*Plugins, error) {
	out := new(Plugins)
	err := c.cc.Invoke(ctx, PluginsService_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginsServiceClient) Create(ctx context.Context, in *Plugin, opts ...grpc.CallOption) (*Plugin, error) {
	out := new(Plugin)
	err := c.cc.Invoke(ctx, PluginsService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginsServiceClient) Update(ctx context.Context, in *Plugin, opts ...grpc.CallOption) (*Plugin, error) {
	out := new(Plugin)
	err := c.cc.Invoke(ctx, PluginsService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginsServiceClient) Delete(ctx context.Context, in *Plugin, opts ...grpc.CallOption) (*Plugin, error) {
	out := new(Plugin)
	err := c.cc.Invoke(ctx, PluginsService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PluginsServiceServer is the server API for PluginsService service.
// All implementations must embed UnimplementedPluginsServiceServer
// for forward compatibility
type PluginsServiceServer interface {
	Get(context.Context, *Plugin) (*Plugin, error)
	List(context.Context, *ListRequest) (*Plugins, error)
	Create(context.Context, *Plugin) (*Plugin, error)
	Update(context.Context, *Plugin) (*Plugin, error)
	Delete(context.Context, *Plugin) (*Plugin, error)
	mustEmbedUnimplementedPluginsServiceServer()
}

// UnimplementedPluginsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPluginsServiceServer struct {
}

func (UnimplementedPluginsServiceServer) Get(context.Context, *Plugin) (*Plugin, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedPluginsServiceServer) List(context.Context, *ListRequest) (*Plugins, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedPluginsServiceServer) Create(context.Context, *Plugin) (*Plugin, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedPluginsServiceServer) Update(context.Context, *Plugin) (*Plugin, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedPluginsServiceServer) Delete(context.Context, *Plugin) (*Plugin, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedPluginsServiceServer) mustEmbedUnimplementedPluginsServiceServer() {}

// UnsafePluginsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PluginsServiceServer will
// result in compilation errors.
type UnsafePluginsServiceServer interface {
	mustEmbedUnimplementedPluginsServiceServer()
}

func RegisterPluginsServiceServer(s grpc.ServiceRegistrar, srv PluginsServiceServer) {
	s.RegisterService(&PluginsService_ServiceDesc, srv)
}

func _PluginsService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Plugin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginsServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PluginsService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginsServiceServer).Get(ctx, req.(*Plugin))
	}
	return interceptor(ctx, in, info, handler)
}

func _PluginsService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginsServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PluginsService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginsServiceServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PluginsService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Plugin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginsServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PluginsService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginsServiceServer).Create(ctx, req.(*Plugin))
	}
	return interceptor(ctx, in, info, handler)
}

func _PluginsService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Plugin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginsServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PluginsService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginsServiceServer).Update(ctx, req.(*Plugin))
	}
	return interceptor(ctx, in, info, handler)
}

func _PluginsService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Plugin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginsServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PluginsService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginsServiceServer).Delete(ctx, req.(*Plugin))
	}
	return interceptor(ctx, in, info, handler)
}

// PluginsService_ServiceDesc is the grpc.ServiceDesc for PluginsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PluginsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "infinimesh.plugins.PluginsService",
	HandlerType: (*PluginsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _PluginsService_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _PluginsService_List_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _PluginsService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _PluginsService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _PluginsService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "plugins/plugins.proto",
}
