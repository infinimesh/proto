//
//Copyright Â© 2021-2023 Infinite Devices GmbH
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: plugins/plugins.proto

package pluginsconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	plugins "github.com/infinimesh/proto/plugins"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion0_1_0

const (
	// PluginsServiceName is the fully-qualified name of the PluginsService service.
	PluginsServiceName = "infinimesh.plugins.PluginsService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// PluginsServiceGetProcedure is the fully-qualified name of the PluginsService's Get RPC.
	PluginsServiceGetProcedure = "/infinimesh.plugins.PluginsService/Get"
	// PluginsServiceListProcedure is the fully-qualified name of the PluginsService's List RPC.
	PluginsServiceListProcedure = "/infinimesh.plugins.PluginsService/List"
	// PluginsServiceCreateProcedure is the fully-qualified name of the PluginsService's Create RPC.
	PluginsServiceCreateProcedure = "/infinimesh.plugins.PluginsService/Create"
	// PluginsServiceUpdateProcedure is the fully-qualified name of the PluginsService's Update RPC.
	PluginsServiceUpdateProcedure = "/infinimesh.plugins.PluginsService/Update"
	// PluginsServiceDeleteProcedure is the fully-qualified name of the PluginsService's Delete RPC.
	PluginsServiceDeleteProcedure = "/infinimesh.plugins.PluginsService/Delete"
)

// PluginsServiceClient is a client for the infinimesh.plugins.PluginsService service.
type PluginsServiceClient interface {
	Get(context.Context, *connect.Request[plugins.Plugin]) (*connect.Response[plugins.Plugin], error)
	List(context.Context, *connect.Request[plugins.ListRequest]) (*connect.Response[plugins.Plugins], error)
	Create(context.Context, *connect.Request[plugins.Plugin]) (*connect.Response[plugins.Plugin], error)
	Update(context.Context, *connect.Request[plugins.Plugin]) (*connect.Response[plugins.Plugin], error)
	Delete(context.Context, *connect.Request[plugins.Plugin]) (*connect.Response[plugins.Plugin], error)
}

// NewPluginsServiceClient constructs a client for the infinimesh.plugins.PluginsService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPluginsServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) PluginsServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &pluginsServiceClient{
		get: connect.NewClient[plugins.Plugin, plugins.Plugin](
			httpClient,
			baseURL+PluginsServiceGetProcedure,
			opts...,
		),
		list: connect.NewClient[plugins.ListRequest, plugins.Plugins](
			httpClient,
			baseURL+PluginsServiceListProcedure,
			opts...,
		),
		create: connect.NewClient[plugins.Plugin, plugins.Plugin](
			httpClient,
			baseURL+PluginsServiceCreateProcedure,
			opts...,
		),
		update: connect.NewClient[plugins.Plugin, plugins.Plugin](
			httpClient,
			baseURL+PluginsServiceUpdateProcedure,
			opts...,
		),
		delete: connect.NewClient[plugins.Plugin, plugins.Plugin](
			httpClient,
			baseURL+PluginsServiceDeleteProcedure,
			opts...,
		),
	}
}

// pluginsServiceClient implements PluginsServiceClient.
type pluginsServiceClient struct {
	get    *connect.Client[plugins.Plugin, plugins.Plugin]
	list   *connect.Client[plugins.ListRequest, plugins.Plugins]
	create *connect.Client[plugins.Plugin, plugins.Plugin]
	update *connect.Client[plugins.Plugin, plugins.Plugin]
	delete *connect.Client[plugins.Plugin, plugins.Plugin]
}

// Get calls infinimesh.plugins.PluginsService.Get.
func (c *pluginsServiceClient) Get(ctx context.Context, req *connect.Request[plugins.Plugin]) (*connect.Response[plugins.Plugin], error) {
	return c.get.CallUnary(ctx, req)
}

// List calls infinimesh.plugins.PluginsService.List.
func (c *pluginsServiceClient) List(ctx context.Context, req *connect.Request[plugins.ListRequest]) (*connect.Response[plugins.Plugins], error) {
	return c.list.CallUnary(ctx, req)
}

// Create calls infinimesh.plugins.PluginsService.Create.
func (c *pluginsServiceClient) Create(ctx context.Context, req *connect.Request[plugins.Plugin]) (*connect.Response[plugins.Plugin], error) {
	return c.create.CallUnary(ctx, req)
}

// Update calls infinimesh.plugins.PluginsService.Update.
func (c *pluginsServiceClient) Update(ctx context.Context, req *connect.Request[plugins.Plugin]) (*connect.Response[plugins.Plugin], error) {
	return c.update.CallUnary(ctx, req)
}

// Delete calls infinimesh.plugins.PluginsService.Delete.
func (c *pluginsServiceClient) Delete(ctx context.Context, req *connect.Request[plugins.Plugin]) (*connect.Response[plugins.Plugin], error) {
	return c.delete.CallUnary(ctx, req)
}

// PluginsServiceHandler is an implementation of the infinimesh.plugins.PluginsService service.
type PluginsServiceHandler interface {
	Get(context.Context, *connect.Request[plugins.Plugin]) (*connect.Response[plugins.Plugin], error)
	List(context.Context, *connect.Request[plugins.ListRequest]) (*connect.Response[plugins.Plugins], error)
	Create(context.Context, *connect.Request[plugins.Plugin]) (*connect.Response[plugins.Plugin], error)
	Update(context.Context, *connect.Request[plugins.Plugin]) (*connect.Response[plugins.Plugin], error)
	Delete(context.Context, *connect.Request[plugins.Plugin]) (*connect.Response[plugins.Plugin], error)
}

// NewPluginsServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPluginsServiceHandler(svc PluginsServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	pluginsServiceGetHandler := connect.NewUnaryHandler(
		PluginsServiceGetProcedure,
		svc.Get,
		opts...,
	)
	pluginsServiceListHandler := connect.NewUnaryHandler(
		PluginsServiceListProcedure,
		svc.List,
		opts...,
	)
	pluginsServiceCreateHandler := connect.NewUnaryHandler(
		PluginsServiceCreateProcedure,
		svc.Create,
		opts...,
	)
	pluginsServiceUpdateHandler := connect.NewUnaryHandler(
		PluginsServiceUpdateProcedure,
		svc.Update,
		opts...,
	)
	pluginsServiceDeleteHandler := connect.NewUnaryHandler(
		PluginsServiceDeleteProcedure,
		svc.Delete,
		opts...,
	)
	return "/infinimesh.plugins.PluginsService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case PluginsServiceGetProcedure:
			pluginsServiceGetHandler.ServeHTTP(w, r)
		case PluginsServiceListProcedure:
			pluginsServiceListHandler.ServeHTTP(w, r)
		case PluginsServiceCreateProcedure:
			pluginsServiceCreateHandler.ServeHTTP(w, r)
		case PluginsServiceUpdateProcedure:
			pluginsServiceUpdateHandler.ServeHTTP(w, r)
		case PluginsServiceDeleteProcedure:
			pluginsServiceDeleteHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedPluginsServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedPluginsServiceHandler struct{}

func (UnimplementedPluginsServiceHandler) Get(context.Context, *connect.Request[plugins.Plugin]) (*connect.Response[plugins.Plugin], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("infinimesh.plugins.PluginsService.Get is not implemented"))
}

func (UnimplementedPluginsServiceHandler) List(context.Context, *connect.Request[plugins.ListRequest]) (*connect.Response[plugins.Plugins], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("infinimesh.plugins.PluginsService.List is not implemented"))
}

func (UnimplementedPluginsServiceHandler) Create(context.Context, *connect.Request[plugins.Plugin]) (*connect.Response[plugins.Plugin], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("infinimesh.plugins.PluginsService.Create is not implemented"))
}

func (UnimplementedPluginsServiceHandler) Update(context.Context, *connect.Request[plugins.Plugin]) (*connect.Response[plugins.Plugin], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("infinimesh.plugins.PluginsService.Update is not implemented"))
}

func (UnimplementedPluginsServiceHandler) Delete(context.Context, *connect.Request[plugins.Plugin]) (*connect.Response[plugins.Plugin], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("infinimesh.plugins.PluginsService.Delete is not implemented"))
}
