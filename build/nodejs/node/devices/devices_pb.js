// source: node/devices/devices.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

var node_access_access_pb = require('../../node/access/access_pb.js');
goog.object.extend(proto, node_access_access_pb);
goog.exportSymbol('proto.infinimesh.node.devices.Certificate', null, global);
goog.exportSymbol('proto.infinimesh.node.devices.CreateRequest', null, global);
goog.exportSymbol('proto.infinimesh.node.devices.CreateResponse', null, global);
goog.exportSymbol('proto.infinimesh.node.devices.Device', null, global);
goog.exportSymbol('proto.infinimesh.node.devices.Devices', null, global);
goog.exportSymbol('proto.infinimesh.node.devices.GetByFingerprintRequest', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.infinimesh.node.devices.Device = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.infinimesh.node.devices.Device.repeatedFields_, null);
};
goog.inherits(proto.infinimesh.node.devices.Device, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.infinimesh.node.devices.Device.displayName = 'proto.infinimesh.node.devices.Device';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.infinimesh.node.devices.Certificate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.infinimesh.node.devices.Certificate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.infinimesh.node.devices.Certificate.displayName = 'proto.infinimesh.node.devices.Certificate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.infinimesh.node.devices.Devices = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.infinimesh.node.devices.Devices.repeatedFields_, null);
};
goog.inherits(proto.infinimesh.node.devices.Devices, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.infinimesh.node.devices.Devices.displayName = 'proto.infinimesh.node.devices.Devices';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.infinimesh.node.devices.CreateRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.infinimesh.node.devices.CreateRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.infinimesh.node.devices.CreateRequest.displayName = 'proto.infinimesh.node.devices.CreateRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.infinimesh.node.devices.CreateResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.infinimesh.node.devices.CreateResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.infinimesh.node.devices.CreateResponse.displayName = 'proto.infinimesh.node.devices.CreateResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.infinimesh.node.devices.GetByFingerprintRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.infinimesh.node.devices.GetByFingerprintRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.infinimesh.node.devices.GetByFingerprintRequest.displayName = 'proto.infinimesh.node.devices.GetByFingerprintRequest';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.infinimesh.node.devices.Device.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.infinimesh.node.devices.Device.prototype.toObject = function(opt_includeInstance) {
  return proto.infinimesh.node.devices.Device.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.infinimesh.node.devices.Device} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.infinimesh.node.devices.Device.toObject = function(includeInstance, msg) {
  var f, obj = {
    uuid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    title: jspb.Message.getFieldWithDefault(msg, 2, ""),
    enabled: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    certificate: (f = msg.getCertificate()) && proto.infinimesh.node.devices.Certificate.toObject(includeInstance, f),
    tagsList: (f = jspb.Message.getRepeatedField(msg, 5)) == null ? undefined : f,
    basicEnabled: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
    token: jspb.Message.getFieldWithDefault(msg, 7, ""),
    access: (f = msg.getAccess()) && node_access_access_pb.Access.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.infinimesh.node.devices.Device}
 */
proto.infinimesh.node.devices.Device.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.infinimesh.node.devices.Device;
  return proto.infinimesh.node.devices.Device.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.infinimesh.node.devices.Device} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.infinimesh.node.devices.Device}
 */
proto.infinimesh.node.devices.Device.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnabled(value);
      break;
    case 4:
      var value = new proto.infinimesh.node.devices.Certificate;
      reader.readMessage(value,proto.infinimesh.node.devices.Certificate.deserializeBinaryFromReader);
      msg.setCertificate(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.addTags(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBasicEnabled(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    case 8:
      var value = new node_access_access_pb.Access;
      reader.readMessage(value,node_access_access_pb.Access.deserializeBinaryFromReader);
      msg.setAccess(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.infinimesh.node.devices.Device.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.infinimesh.node.devices.Device.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.infinimesh.node.devices.Device} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.infinimesh.node.devices.Device.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUuid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTitle();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getEnabled();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getCertificate();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.infinimesh.node.devices.Certificate.serializeBinaryToWriter
    );
  }
  f = message.getTagsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      5,
      f
    );
  }
  f = message.getBasicEnabled();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getAccess();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      node_access_access_pb.Access.serializeBinaryToWriter
    );
  }
};


/**
 * optional string uuid = 1;
 * @return {string}
 */
proto.infinimesh.node.devices.Device.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.infinimesh.node.devices.Device} returns this
 */
proto.infinimesh.node.devices.Device.prototype.setUuid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string title = 2;
 * @return {string}
 */
proto.infinimesh.node.devices.Device.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.infinimesh.node.devices.Device} returns this
 */
proto.infinimesh.node.devices.Device.prototype.setTitle = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool enabled = 3;
 * @return {boolean}
 */
proto.infinimesh.node.devices.Device.prototype.getEnabled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.infinimesh.node.devices.Device} returns this
 */
proto.infinimesh.node.devices.Device.prototype.setEnabled = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional Certificate certificate = 4;
 * @return {?proto.infinimesh.node.devices.Certificate}
 */
proto.infinimesh.node.devices.Device.prototype.getCertificate = function() {
  return /** @type{?proto.infinimesh.node.devices.Certificate} */ (
    jspb.Message.getWrapperField(this, proto.infinimesh.node.devices.Certificate, 4));
};


/**
 * @param {?proto.infinimesh.node.devices.Certificate|undefined} value
 * @return {!proto.infinimesh.node.devices.Device} returns this
*/
proto.infinimesh.node.devices.Device.prototype.setCertificate = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.infinimesh.node.devices.Device} returns this
 */
proto.infinimesh.node.devices.Device.prototype.clearCertificate = function() {
  return this.setCertificate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.infinimesh.node.devices.Device.prototype.hasCertificate = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated string tags = 5;
 * @return {!Array<string>}
 */
proto.infinimesh.node.devices.Device.prototype.getTagsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 5));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.infinimesh.node.devices.Device} returns this
 */
proto.infinimesh.node.devices.Device.prototype.setTagsList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.infinimesh.node.devices.Device} returns this
 */
proto.infinimesh.node.devices.Device.prototype.addTags = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.infinimesh.node.devices.Device} returns this
 */
proto.infinimesh.node.devices.Device.prototype.clearTagsList = function() {
  return this.setTagsList([]);
};


/**
 * optional bool basic_enabled = 6;
 * @return {boolean}
 */
proto.infinimesh.node.devices.Device.prototype.getBasicEnabled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.infinimesh.node.devices.Device} returns this
 */
proto.infinimesh.node.devices.Device.prototype.setBasicEnabled = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional string token = 7;
 * @return {string}
 */
proto.infinimesh.node.devices.Device.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.infinimesh.node.devices.Device} returns this
 */
proto.infinimesh.node.devices.Device.prototype.setToken = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional infinimesh.node.access.Access access = 8;
 * @return {?proto.infinimesh.node.access.Access}
 */
proto.infinimesh.node.devices.Device.prototype.getAccess = function() {
  return /** @type{?proto.infinimesh.node.access.Access} */ (
    jspb.Message.getWrapperField(this, node_access_access_pb.Access, 8));
};


/**
 * @param {?proto.infinimesh.node.access.Access|undefined} value
 * @return {!proto.infinimesh.node.devices.Device} returns this
*/
proto.infinimesh.node.devices.Device.prototype.setAccess = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.infinimesh.node.devices.Device} returns this
 */
proto.infinimesh.node.devices.Device.prototype.clearAccess = function() {
  return this.setAccess(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.infinimesh.node.devices.Device.prototype.hasAccess = function() {
  return jspb.Message.getField(this, 8) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.infinimesh.node.devices.Certificate.prototype.toObject = function(opt_includeInstance) {
  return proto.infinimesh.node.devices.Certificate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.infinimesh.node.devices.Certificate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.infinimesh.node.devices.Certificate.toObject = function(includeInstance, msg) {
  var f, obj = {
    pemData: jspb.Message.getFieldWithDefault(msg, 1, ""),
    algorithm: jspb.Message.getFieldWithDefault(msg, 2, ""),
    fingerprint: msg.getFingerprint_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.infinimesh.node.devices.Certificate}
 */
proto.infinimesh.node.devices.Certificate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.infinimesh.node.devices.Certificate;
  return proto.infinimesh.node.devices.Certificate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.infinimesh.node.devices.Certificate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.infinimesh.node.devices.Certificate}
 */
proto.infinimesh.node.devices.Certificate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPemData(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAlgorithm(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setFingerprint(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.infinimesh.node.devices.Certificate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.infinimesh.node.devices.Certificate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.infinimesh.node.devices.Certificate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.infinimesh.node.devices.Certificate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPemData();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAlgorithm();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getFingerprint_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional string pem_data = 1;
 * @return {string}
 */
proto.infinimesh.node.devices.Certificate.prototype.getPemData = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.infinimesh.node.devices.Certificate} returns this
 */
proto.infinimesh.node.devices.Certificate.prototype.setPemData = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string algorithm = 2;
 * @return {string}
 */
proto.infinimesh.node.devices.Certificate.prototype.getAlgorithm = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.infinimesh.node.devices.Certificate} returns this
 */
proto.infinimesh.node.devices.Certificate.prototype.setAlgorithm = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bytes fingerprint = 3;
 * @return {!(string|Uint8Array)}
 */
proto.infinimesh.node.devices.Certificate.prototype.getFingerprint = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes fingerprint = 3;
 * This is a type-conversion wrapper around `getFingerprint()`
 * @return {string}
 */
proto.infinimesh.node.devices.Certificate.prototype.getFingerprint_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getFingerprint()));
};


/**
 * optional bytes fingerprint = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getFingerprint()`
 * @return {!Uint8Array}
 */
proto.infinimesh.node.devices.Certificate.prototype.getFingerprint_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getFingerprint()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.infinimesh.node.devices.Certificate} returns this
 */
proto.infinimesh.node.devices.Certificate.prototype.setFingerprint = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.infinimesh.node.devices.Devices.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.infinimesh.node.devices.Devices.prototype.toObject = function(opt_includeInstance) {
  return proto.infinimesh.node.devices.Devices.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.infinimesh.node.devices.Devices} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.infinimesh.node.devices.Devices.toObject = function(includeInstance, msg) {
  var f, obj = {
    devicesList: jspb.Message.toObjectList(msg.getDevicesList(),
    proto.infinimesh.node.devices.Device.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.infinimesh.node.devices.Devices}
 */
proto.infinimesh.node.devices.Devices.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.infinimesh.node.devices.Devices;
  return proto.infinimesh.node.devices.Devices.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.infinimesh.node.devices.Devices} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.infinimesh.node.devices.Devices}
 */
proto.infinimesh.node.devices.Devices.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.infinimesh.node.devices.Device;
      reader.readMessage(value,proto.infinimesh.node.devices.Device.deserializeBinaryFromReader);
      msg.addDevices(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.infinimesh.node.devices.Devices.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.infinimesh.node.devices.Devices.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.infinimesh.node.devices.Devices} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.infinimesh.node.devices.Devices.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDevicesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.infinimesh.node.devices.Device.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Device devices = 1;
 * @return {!Array<!proto.infinimesh.node.devices.Device>}
 */
proto.infinimesh.node.devices.Devices.prototype.getDevicesList = function() {
  return /** @type{!Array<!proto.infinimesh.node.devices.Device>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.infinimesh.node.devices.Device, 1));
};


/**
 * @param {!Array<!proto.infinimesh.node.devices.Device>} value
 * @return {!proto.infinimesh.node.devices.Devices} returns this
*/
proto.infinimesh.node.devices.Devices.prototype.setDevicesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.infinimesh.node.devices.Device=} opt_value
 * @param {number=} opt_index
 * @return {!proto.infinimesh.node.devices.Device}
 */
proto.infinimesh.node.devices.Devices.prototype.addDevices = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.infinimesh.node.devices.Device, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.infinimesh.node.devices.Devices} returns this
 */
proto.infinimesh.node.devices.Devices.prototype.clearDevicesList = function() {
  return this.setDevicesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.infinimesh.node.devices.CreateRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.infinimesh.node.devices.CreateRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.infinimesh.node.devices.CreateRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.infinimesh.node.devices.CreateRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    device: (f = msg.getDevice()) && proto.infinimesh.node.devices.Device.toObject(includeInstance, f),
    namespace: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.infinimesh.node.devices.CreateRequest}
 */
proto.infinimesh.node.devices.CreateRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.infinimesh.node.devices.CreateRequest;
  return proto.infinimesh.node.devices.CreateRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.infinimesh.node.devices.CreateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.infinimesh.node.devices.CreateRequest}
 */
proto.infinimesh.node.devices.CreateRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.infinimesh.node.devices.Device;
      reader.readMessage(value,proto.infinimesh.node.devices.Device.deserializeBinaryFromReader);
      msg.setDevice(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNamespace(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.infinimesh.node.devices.CreateRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.infinimesh.node.devices.CreateRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.infinimesh.node.devices.CreateRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.infinimesh.node.devices.CreateRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDevice();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.infinimesh.node.devices.Device.serializeBinaryToWriter
    );
  }
  f = message.getNamespace();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional Device device = 1;
 * @return {?proto.infinimesh.node.devices.Device}
 */
proto.infinimesh.node.devices.CreateRequest.prototype.getDevice = function() {
  return /** @type{?proto.infinimesh.node.devices.Device} */ (
    jspb.Message.getWrapperField(this, proto.infinimesh.node.devices.Device, 1));
};


/**
 * @param {?proto.infinimesh.node.devices.Device|undefined} value
 * @return {!proto.infinimesh.node.devices.CreateRequest} returns this
*/
proto.infinimesh.node.devices.CreateRequest.prototype.setDevice = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.infinimesh.node.devices.CreateRequest} returns this
 */
proto.infinimesh.node.devices.CreateRequest.prototype.clearDevice = function() {
  return this.setDevice(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.infinimesh.node.devices.CreateRequest.prototype.hasDevice = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string namespace = 2;
 * @return {string}
 */
proto.infinimesh.node.devices.CreateRequest.prototype.getNamespace = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.infinimesh.node.devices.CreateRequest} returns this
 */
proto.infinimesh.node.devices.CreateRequest.prototype.setNamespace = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.infinimesh.node.devices.CreateResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.infinimesh.node.devices.CreateResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.infinimesh.node.devices.CreateResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.infinimesh.node.devices.CreateResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    device: (f = msg.getDevice()) && proto.infinimesh.node.devices.Device.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.infinimesh.node.devices.CreateResponse}
 */
proto.infinimesh.node.devices.CreateResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.infinimesh.node.devices.CreateResponse;
  return proto.infinimesh.node.devices.CreateResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.infinimesh.node.devices.CreateResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.infinimesh.node.devices.CreateResponse}
 */
proto.infinimesh.node.devices.CreateResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.infinimesh.node.devices.Device;
      reader.readMessage(value,proto.infinimesh.node.devices.Device.deserializeBinaryFromReader);
      msg.setDevice(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.infinimesh.node.devices.CreateResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.infinimesh.node.devices.CreateResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.infinimesh.node.devices.CreateResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.infinimesh.node.devices.CreateResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDevice();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.infinimesh.node.devices.Device.serializeBinaryToWriter
    );
  }
};


/**
 * optional Device device = 1;
 * @return {?proto.infinimesh.node.devices.Device}
 */
proto.infinimesh.node.devices.CreateResponse.prototype.getDevice = function() {
  return /** @type{?proto.infinimesh.node.devices.Device} */ (
    jspb.Message.getWrapperField(this, proto.infinimesh.node.devices.Device, 1));
};


/**
 * @param {?proto.infinimesh.node.devices.Device|undefined} value
 * @return {!proto.infinimesh.node.devices.CreateResponse} returns this
*/
proto.infinimesh.node.devices.CreateResponse.prototype.setDevice = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.infinimesh.node.devices.CreateResponse} returns this
 */
proto.infinimesh.node.devices.CreateResponse.prototype.clearDevice = function() {
  return this.setDevice(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.infinimesh.node.devices.CreateResponse.prototype.hasDevice = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.infinimesh.node.devices.GetByFingerprintRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.infinimesh.node.devices.GetByFingerprintRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.infinimesh.node.devices.GetByFingerprintRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.infinimesh.node.devices.GetByFingerprintRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    fingerprint: msg.getFingerprint_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.infinimesh.node.devices.GetByFingerprintRequest}
 */
proto.infinimesh.node.devices.GetByFingerprintRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.infinimesh.node.devices.GetByFingerprintRequest;
  return proto.infinimesh.node.devices.GetByFingerprintRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.infinimesh.node.devices.GetByFingerprintRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.infinimesh.node.devices.GetByFingerprintRequest}
 */
proto.infinimesh.node.devices.GetByFingerprintRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setFingerprint(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.infinimesh.node.devices.GetByFingerprintRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.infinimesh.node.devices.GetByFingerprintRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.infinimesh.node.devices.GetByFingerprintRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.infinimesh.node.devices.GetByFingerprintRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFingerprint_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes fingerprint = 1;
 * @return {!(string|Uint8Array)}
 */
proto.infinimesh.node.devices.GetByFingerprintRequest.prototype.getFingerprint = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes fingerprint = 1;
 * This is a type-conversion wrapper around `getFingerprint()`
 * @return {string}
 */
proto.infinimesh.node.devices.GetByFingerprintRequest.prototype.getFingerprint_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getFingerprint()));
};


/**
 * optional bytes fingerprint = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getFingerprint()`
 * @return {!Uint8Array}
 */
proto.infinimesh.node.devices.GetByFingerprintRequest.prototype.getFingerprint_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getFingerprint()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.infinimesh.node.devices.GetByFingerprintRequest} returns this
 */
proto.infinimesh.node.devices.GetByFingerprintRequest.prototype.setFingerprint = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


goog.object.extend(exports, proto.infinimesh.node.devices);
