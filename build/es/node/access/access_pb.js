//
//Copyright Â© 2021-2023 Infinite Devices GmbH
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// @generated by protoc-gen-es v1.6.0 with parameter "target=js+dts"
// @generated from file node/access/access.proto (package infinimesh.node.access, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { proto3 } from "@bufbuild/protobuf";

/**
 * @generated from enum infinimesh.node.access.Level
 */
export const Level = proto3.makeEnum(
  "infinimesh.node.access.Level",
  [
    {no: 0, name: "NONE"},
    {no: 1, name: "READ"},
    {no: 2, name: "MGMT"},
    {no: 3, name: "ADMIN"},
    {no: 4, name: "ROOT"},
  ],
);

/**
 * @generated from enum infinimesh.node.access.Role
 */
export const Role = proto3.makeEnum(
  "infinimesh.node.access.Role",
  [
    {no: 0, name: "UNSET"},
    {no: 1, name: "OWNER"},
    {no: 2, name: "SHARED"},
  ],
);

/**
 * @generated from message infinimesh.node.access.Access
 */
export const Access = proto3.makeMessageType(
  "infinimesh.node.access.Access",
  () => [
    { no: 1, name: "level", kind: "enum", T: proto3.getEnumType(Level) },
    { no: 2, name: "role", kind: "enum", T: proto3.getEnumType(Role) },
    { no: 3, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ],
);

/**
 * @generated from message infinimesh.node.access.Node
 */
export const Node = proto3.makeMessageType(
  "infinimesh.node.access.Node",
  () => [
    { no: 1, name: "node", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "parent", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "edge", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "access", kind: "message", T: Access, opt: true },
  ],
);

/**
 * @generated from message infinimesh.node.access.Nodes
 */
export const Nodes = proto3.makeMessageType(
  "infinimesh.node.access.Nodes",
  () => [
    { no: 1, name: "nodes", kind: "message", T: Node, repeated: true },
  ],
);

