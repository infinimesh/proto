//
//Copyright Â© 2021-2023 Infinite Devices GmbH
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// @generated by protoc-gen-es v1.6.0 with parameter "target=js+dts"
// @generated from file node/namespaces/namespaces.proto (package infinimesh.node.namespaces, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage, Struct } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { Access } from "../access/access_pb.js";

/**
 * @generated from message infinimesh.node.namespaces.Plugin
 */
export declare class Plugin extends Message<Plugin> {
  /**
   * @generated from field: string uuid = 1;
   */
  uuid: string;

  /**
   * @generated from field: map<string, string> vars = 2;
   */
  vars: { [key: string]: string };

  constructor(data?: PartialMessage<Plugin>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "infinimesh.node.namespaces.Plugin";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Plugin;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Plugin;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Plugin;

  static equals(a: Plugin | PlainMessage<Plugin> | undefined, b: Plugin | PlainMessage<Plugin> | undefined): boolean;
}

/**
 * @generated from message infinimesh.node.namespaces.Namespace
 */
export declare class Namespace extends Message<Namespace> {
  /**
   * @generated from field: string uuid = 1;
   */
  uuid: string;

  /**
   * @generated from field: string title = 2;
   */
  title: string;

  /**
   * @generated from field: optional infinimesh.node.access.Access access = 3;
   */
  access?: Access;

  /**
   * @generated from field: optional infinimesh.node.namespaces.Plugin plugin = 4;
   */
  plugin?: Plugin;

  /**
   * @generated from field: google.protobuf.Struct config = 5;
   */
  config?: Struct;

  constructor(data?: PartialMessage<Namespace>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "infinimesh.node.namespaces.Namespace";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Namespace;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Namespace;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Namespace;

  static equals(a: Namespace | PlainMessage<Namespace> | undefined, b: Namespace | PlainMessage<Namespace> | undefined): boolean;
}

/**
 * @generated from message infinimesh.node.namespaces.Namespaces
 */
export declare class Namespaces extends Message<Namespaces> {
  /**
   * @generated from field: repeated infinimesh.node.namespaces.Namespace namespaces = 1;
   */
  namespaces: Namespace[];

  constructor(data?: PartialMessage<Namespaces>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "infinimesh.node.namespaces.Namespaces";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Namespaces;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Namespaces;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Namespaces;

  static equals(a: Namespaces | PlainMessage<Namespaces> | undefined, b: Namespaces | PlainMessage<Namespaces> | undefined): boolean;
}

