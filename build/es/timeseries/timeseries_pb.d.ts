// @generated by protoc-gen-es v1.7.2 with parameter "target=js+dts"
// @generated from file timeseries/timeseries.proto (package infinimesh.timeseries, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from enum infinimesh.timeseries.DuplicatePolicy
 */
export declare enum DuplicatePolicy {
  /**
   * @generated from enum value: USE_FIRST = 0;
   */
  USE_FIRST = 0,

  /**
   * @generated from enum value: USE_LAST = 1;
   */
  USE_LAST = 1,
}

/**
 * @generated from enum infinimesh.timeseries.AggregationType
 */
export declare enum AggregationType {
  /**
   * @generated from enum value: NONE = 0;
   */
  NONE = 0,

  /**
   * @generated from enum value: SUM = 1;
   */
  SUM = 1,

  /**
   * @generated from enum value: MIN = 2;
   */
  MIN = 2,

  /**
   * @generated from enum value: MAX = 3;
   */
  MAX = 3,

  /**
   * @generated from enum value: AVG = 4;
   */
  AVG = 4,

  /**
   * @generated from enum value: RANGE = 5;
   */
  RANGE = 5,

  /**
   * @generated from enum value: COUNT = 6;
   */
  COUNT = 6,

  /**
   * @generated from enum value: FIRST = 7;
   */
  FIRST = 7,

  /**
   * @generated from enum value: LAST = 8;
   */
  LAST = 8,

  /**
   * @generated from enum value: STD_P = 9;
   */
  STD_P = 9,

  /**
   * @generated from enum value: STD_S = 10;
   */
  STD_S = 10,

  /**
   * @generated from enum value: VAR_P = 11;
   */
  VAR_P = 11,

  /**
   * @generated from enum value: VAR_S = 12;
   */
  VAR_S = 12,

  /**
   * @generated from enum value: TWA = 13;
   */
  TWA = 13,
}

/**
 * @generated from message infinimesh.timeseries.DataPoint
 */
export declare class DataPoint extends Message<DataPoint> {
  /**
   * @generated from field: int64 ts = 1;
   */
  ts: bigint;

  /**
   * @generated from field: double value = 2;
   */
  value: number;

  constructor(data?: PartialMessage<DataPoint>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "infinimesh.timeseries.DataPoint";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DataPoint;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DataPoint;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DataPoint;

  static equals(a: DataPoint | PlainMessage<DataPoint> | undefined, b: DataPoint | PlainMessage<DataPoint> | undefined): boolean;
}

/**
 * @generated from message infinimesh.timeseries.WriteRequest
 */
export declare class WriteRequest extends Message<WriteRequest> {
  /**
   * @generated from field: string device = 1;
   */
  device: string;

  /**
   * @generated from field: string metric = 2;
   */
  metric: string;

  /**
   * @generated from field: infinimesh.timeseries.DataPoint data_point = 3;
   */
  dataPoint?: DataPoint;

  /**
   * @generated from field: infinimesh.timeseries.DuplicatePolicy duplicate_policy = 4;
   */
  duplicatePolicy: DuplicatePolicy;

  constructor(data?: PartialMessage<WriteRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "infinimesh.timeseries.WriteRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WriteRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WriteRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WriteRequest;

  static equals(a: WriteRequest | PlainMessage<WriteRequest> | undefined, b: WriteRequest | PlainMessage<WriteRequest> | undefined): boolean;
}

/**
 * @generated from message infinimesh.timeseries.WriteResponse
 */
export declare class WriteResponse extends Message<WriteResponse> {
  /**
   * @generated from field: bool result = 1;
   */
  result: boolean;

  /**
   * @generated from field: int64 ts = 2;
   */
  ts: bigint;

  constructor(data?: PartialMessage<WriteResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "infinimesh.timeseries.WriteResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WriteResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WriteResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WriteResponse;

  static equals(a: WriteResponse | PlainMessage<WriteResponse> | undefined, b: WriteResponse | PlainMessage<WriteResponse> | undefined): boolean;
}

/**
 * @generated from message infinimesh.timeseries.WriteBulkRequest
 */
export declare class WriteBulkRequest extends Message<WriteBulkRequest> {
  /**
   * @generated from field: string device = 1;
   */
  device: string;

  /**
   * @generated from field: string metric = 2;
   */
  metric: string;

  /**
   * @generated from field: repeated infinimesh.timeseries.DataPoint data_points = 3;
   */
  dataPoints: DataPoint[];

  /**
   * @generated from field: infinimesh.timeseries.DuplicatePolicy duplicate_policy = 4;
   */
  duplicatePolicy: DuplicatePolicy;

  constructor(data?: PartialMessage<WriteBulkRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "infinimesh.timeseries.WriteBulkRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WriteBulkRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WriteBulkRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WriteBulkRequest;

  static equals(a: WriteBulkRequest | PlainMessage<WriteBulkRequest> | undefined, b: WriteBulkRequest | PlainMessage<WriteBulkRequest> | undefined): boolean;
}

/**
 * @generated from message infinimesh.timeseries.WriteBulkResponse
 */
export declare class WriteBulkResponse extends Message<WriteBulkResponse> {
  /**
   * @generated from field: bool result = 1;
   */
  result: boolean;

  constructor(data?: PartialMessage<WriteBulkResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "infinimesh.timeseries.WriteBulkResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WriteBulkResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WriteBulkResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WriteBulkResponse;

  static equals(a: WriteBulkResponse | PlainMessage<WriteBulkResponse> | undefined, b: WriteBulkResponse | PlainMessage<WriteBulkResponse> | undefined): boolean;
}

/**
 * @generated from message infinimesh.timeseries.Aggregation
 */
export declare class Aggregation extends Message<Aggregation> {
  /**
   * @generated from field: int64 value = 1;
   */
  value: bigint;

  /**
   * @generated from field: infinimesh.timeseries.AggregationType aggregation_type = 2;
   */
  aggregationType: AggregationType;

  constructor(data?: PartialMessage<Aggregation>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "infinimesh.timeseries.Aggregation";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Aggregation;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Aggregation;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Aggregation;

  static equals(a: Aggregation | PlainMessage<Aggregation> | undefined, b: Aggregation | PlainMessage<Aggregation> | undefined): boolean;
}

/**
 * @generated from message infinimesh.timeseries.ReadRequest
 */
export declare class ReadRequest extends Message<ReadRequest> {
  /**
   * @generated from field: string device = 1;
   */
  device: string;

  /**
   * @generated from field: repeated string metrics = 2;
   */
  metrics: string[];

  /**
   * @generated from field: int64 from = 3;
   */
  from: bigint;

  /**
   * @generated from field: optional int64 to = 4;
   */
  to?: bigint;

  /**
   * @generated from field: optional infinimesh.timeseries.Aggregation aggregation = 5;
   */
  aggregation?: Aggregation;

  constructor(data?: PartialMessage<ReadRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "infinimesh.timeseries.ReadRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReadRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReadRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReadRequest;

  static equals(a: ReadRequest | PlainMessage<ReadRequest> | undefined, b: ReadRequest | PlainMessage<ReadRequest> | undefined): boolean;
}

/**
 * @generated from message infinimesh.timeseries.MetricInfo
 */
export declare class MetricInfo extends Message<MetricInfo> {
  /**
   * @generated from field: string metric = 1;
   */
  metric: string;

  /**
   * @generated from field: repeated infinimesh.timeseries.DataPoint data_points = 2;
   */
  dataPoints: DataPoint[];

  constructor(data?: PartialMessage<MetricInfo>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "infinimesh.timeseries.MetricInfo";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MetricInfo;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MetricInfo;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MetricInfo;

  static equals(a: MetricInfo | PlainMessage<MetricInfo> | undefined, b: MetricInfo | PlainMessage<MetricInfo> | undefined): boolean;
}

/**
 * @generated from message infinimesh.timeseries.ReadResponse
 */
export declare class ReadResponse extends Message<ReadResponse> {
  /**
   * @generated from field: repeated infinimesh.timeseries.MetricInfo metrics_info = 1;
   */
  metricsInfo: MetricInfo[];

  constructor(data?: PartialMessage<ReadResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "infinimesh.timeseries.ReadResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReadResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReadResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReadResponse;

  static equals(a: ReadResponse | PlainMessage<ReadResponse> | undefined, b: ReadResponse | PlainMessage<ReadResponse> | undefined): boolean;
}

/**
 * @generated from message infinimesh.timeseries.Metric
 */
export declare class Metric extends Message<Metric> {
  /**
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * @generated from field: uint32 data_points = 2;
   */
  dataPoints: number;

  /**
   * @generated from field: infinimesh.timeseries.DataPoint earliest = 3;
   */
  earliest?: DataPoint;

  /**
   * @generated from field: infinimesh.timeseries.DataPoint latest = 4;
   */
  latest?: DataPoint;

  constructor(data?: PartialMessage<Metric>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "infinimesh.timeseries.Metric";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Metric;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Metric;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Metric;

  static equals(a: Metric | PlainMessage<Metric> | undefined, b: Metric | PlainMessage<Metric> | undefined): boolean;
}

/**
 * @generated from message infinimesh.timeseries.DeviceMetric
 */
export declare class DeviceMetric extends Message<DeviceMetric> {
  /**
   * @generated from field: string device = 1;
   */
  device: string;

  /**
   * @generated from field: repeated infinimesh.timeseries.Metric metrics = 2;
   */
  metrics: Metric[];

  constructor(data?: PartialMessage<DeviceMetric>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "infinimesh.timeseries.DeviceMetric";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeviceMetric;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeviceMetric;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeviceMetric;

  static equals(a: DeviceMetric | PlainMessage<DeviceMetric> | undefined, b: DeviceMetric | PlainMessage<DeviceMetric> | undefined): boolean;
}

/**
 * @generated from message infinimesh.timeseries.StatRequest
 */
export declare class StatRequest extends Message<StatRequest> {
  /**
   * @generated from field: optional string namespace = 1;
   */
  namespace?: string;

  /**
   * @generated from field: optional string device = 2;
   */
  device?: string;

  constructor(data?: PartialMessage<StatRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "infinimesh.timeseries.StatRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StatRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StatRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StatRequest;

  static equals(a: StatRequest | PlainMessage<StatRequest> | undefined, b: StatRequest | PlainMessage<StatRequest> | undefined): boolean;
}

/**
 * @generated from message infinimesh.timeseries.StatResponse
 */
export declare class StatResponse extends Message<StatResponse> {
  /**
   * @generated from field: repeated infinimesh.timeseries.DeviceMetric device_metrics = 1;
   */
  deviceMetrics: DeviceMetric[];

  constructor(data?: PartialMessage<StatResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "infinimesh.timeseries.StatResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StatResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StatResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StatResponse;

  static equals(a: StatResponse | PlainMessage<StatResponse> | undefined, b: StatResponse | PlainMessage<StatResponse> | undefined): boolean;
}

/**
 * @generated from message infinimesh.timeseries.FlushRequest
 */
export declare class FlushRequest extends Message<FlushRequest> {
  /**
   * @generated from field: optional string namespace = 1;
   */
  namespace?: string;

  /**
   * @generated from field: optional string device = 2;
   */
  device?: string;

  constructor(data?: PartialMessage<FlushRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "infinimesh.timeseries.FlushRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FlushRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FlushRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FlushRequest;

  static equals(a: FlushRequest | PlainMessage<FlushRequest> | undefined, b: FlushRequest | PlainMessage<FlushRequest> | undefined): boolean;
}

/**
 * @generated from message infinimesh.timeseries.FlushResponse
 */
export declare class FlushResponse extends Message<FlushResponse> {
  /**
   * @generated from field: bool result = 1;
   */
  result: boolean;

  constructor(data?: PartialMessage<FlushResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "infinimesh.timeseries.FlushResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FlushResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FlushResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FlushResponse;

  static equals(a: FlushResponse | PlainMessage<FlushResponse> | undefined, b: FlushResponse | PlainMessage<FlushResponse> | undefined): boolean;
}

