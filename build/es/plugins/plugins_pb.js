//
//Copyright Â© 2021-2023 Infinite Devices GmbH
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// @generated by protoc-gen-es v1.10.0 with parameter "target=js+dts"
// @generated from file plugins/plugins.proto (package infinimesh.plugins, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { proto3 } from "@bufbuild/protobuf";
import { Access } from "../node/access/access_pb.js";

/**
 * @generated from enum infinimesh.plugins.PluginKind
 */
export const PluginKind = /*@__PURE__*/ proto3.makeEnum(
  "infinimesh.plugins.PluginKind",
  [
    {no: 0, name: "UNKNOWN"},
    {no: 1, name: "EMBEDDED"},
    {no: 2, name: "DEVICE"},
  ],
);

/**
 * @generated from message infinimesh.plugins.Plugin
 */
export const Plugin = /*@__PURE__*/ proto3.makeMessageType(
  "infinimesh.plugins.Plugin",
  () => [
    { no: 1, name: "uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "logo", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "public", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 7, name: "access", kind: "message", T: Access, opt: true },
    { no: 8, name: "kind", kind: "enum", T: proto3.getEnumType(PluginKind) },
    { no: 9, name: "vars", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 10, name: "embedded_conf", kind: "message", T: EmbededPluginConf, opt: true },
    { no: 11, name: "device_conf", kind: "message", T: DevicePluginConf, opt: true },
  ],
);

/**
 * @generated from message infinimesh.plugins.Plugins
 */
export const Plugins = /*@__PURE__*/ proto3.makeMessageType(
  "infinimesh.plugins.Plugins",
  () => [
    { no: 1, name: "pool", kind: "message", T: Plugin, repeated: true },
  ],
);

/**
 * @generated from message infinimesh.plugins.EmbededPluginConf
 */
export const EmbededPluginConf = /*@__PURE__*/ proto3.makeMessageType(
  "infinimesh.plugins.EmbededPluginConf",
  () => [
    { no: 1, name: "frame_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * @generated from message infinimesh.plugins.DevicePluginConf
 */
export const DevicePluginConf = /*@__PURE__*/ proto3.makeMessageType(
  "infinimesh.plugins.DevicePluginConf",
  () => [
    { no: 1, name: "view_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "desired_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * @generated from message infinimesh.plugins.ListRequest
 */
export const ListRequest = /*@__PURE__*/ proto3.makeMessageType(
  "infinimesh.plugins.ListRequest",
  () => [
    { no: 1, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ],
);

