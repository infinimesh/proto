// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: eventbus/eventbus.proto

package eventbusconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	eventbus "github.com/infinimesh/proto/eventbus"
	node "github.com/infinimesh/proto/node"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// EventsServiceName is the fully-qualified name of the EventsService service.
	EventsServiceName = "infinimesh.eventbus.EventsService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// EventsServiceSubscribeProcedure is the fully-qualified name of the EventsService's Subscribe RPC.
	EventsServiceSubscribeProcedure = "/infinimesh.eventbus.EventsService/Subscribe"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	eventsServiceServiceDescriptor         = eventbus.File_eventbus_eventbus_proto.Services().ByName("EventsService")
	eventsServiceSubscribeMethodDescriptor = eventsServiceServiceDescriptor.Methods().ByName("Subscribe")
)

// EventsServiceClient is a client for the infinimesh.eventbus.EventsService service.
type EventsServiceClient interface {
	Subscribe(context.Context, *connect.Request[node.EmptyMessage]) (*connect.ServerStreamForClient[eventbus.Event], error)
}

// NewEventsServiceClient constructs a client for the infinimesh.eventbus.EventsService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewEventsServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) EventsServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &eventsServiceClient{
		subscribe: connect.NewClient[node.EmptyMessage, eventbus.Event](
			httpClient,
			baseURL+EventsServiceSubscribeProcedure,
			connect.WithSchema(eventsServiceSubscribeMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// eventsServiceClient implements EventsServiceClient.
type eventsServiceClient struct {
	subscribe *connect.Client[node.EmptyMessage, eventbus.Event]
}

// Subscribe calls infinimesh.eventbus.EventsService.Subscribe.
func (c *eventsServiceClient) Subscribe(ctx context.Context, req *connect.Request[node.EmptyMessage]) (*connect.ServerStreamForClient[eventbus.Event], error) {
	return c.subscribe.CallServerStream(ctx, req)
}

// EventsServiceHandler is an implementation of the infinimesh.eventbus.EventsService service.
type EventsServiceHandler interface {
	Subscribe(context.Context, *connect.Request[node.EmptyMessage], *connect.ServerStream[eventbus.Event]) error
}

// NewEventsServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewEventsServiceHandler(svc EventsServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	eventsServiceSubscribeHandler := connect.NewServerStreamHandler(
		EventsServiceSubscribeProcedure,
		svc.Subscribe,
		connect.WithSchema(eventsServiceSubscribeMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/infinimesh.eventbus.EventsService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case EventsServiceSubscribeProcedure:
			eventsServiceSubscribeHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedEventsServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedEventsServiceHandler struct{}

func (UnimplementedEventsServiceHandler) Subscribe(context.Context, *connect.Request[node.EmptyMessage], *connect.ServerStream[eventbus.Event]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("infinimesh.eventbus.EventsService.Subscribe is not implemented"))
}
