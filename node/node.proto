/*
Copyright Â© 2021-2023 Infinite Devices GmbH

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
syntax = "proto3";
package infinimesh.node;

import "google/api/annotations.proto";
import "node/accounts/accounts.proto";
import "node/access/access.proto";

message TokenRequest {
  infinimesh.node.accounts.Credentials auth = 1;
  int64 exp = 2;
  optional string uuid = 3;
  optional bool inf = 4;

  optional string client = 5;
}

message TokenResponse { string token = 1; }

message SetCredentialsRequest {
  string uuid = 1; // Affected account
  infinimesh.node.accounts.Credentials credentials = 2;
}
message SetCredentialsResponse {}

message GetCredentialsRequest {
  string uuid = 1; // Affected account
}
message GetCredentialsResponse {
  repeated infinimesh.node.accounts.Credentials credentials = 1;
}

message DeleteCredentialsRequest {
  string uuid = 1; // Affected account
  string type = 2; // Credentials Type to Delete
}

message DeleteResponse {}
message EmptyMessage {}

message QueryRequest {
  optional string namespace = 1;
  optional string account = 2;
}

message MoveRequest {
  string uuid = 1;
  string namespace = 2;
}

service AccountsService {
  rpc Token(TokenRequest) returns (TokenResponse) {
    option (google.api.http) = {
      post : "/token"
      body : "*"
    };
  };

  rpc Get(infinimesh.node.accounts.Account)
      returns (infinimesh.node.accounts.Account) {
    option (google.api.http) = {
      get : "/accounts/{uuid}"
    };
  };
  rpc List(EmptyMessage) returns (infinimesh.node.accounts.Accounts) {
    option (google.api.http) = {
      get : "/accounts"
    };
  };

  rpc Create(infinimesh.node.accounts.CreateRequest)
      returns (infinimesh.node.accounts.CreateResponse) {
    option (google.api.http) = {
      put : "/accounts"
      body : "*"
    };
  };
  rpc Update(infinimesh.node.accounts.Account)
      returns (infinimesh.node.accounts.Account) {
    option (google.api.http) = {
      patch : "/accounts/{uuid}"
      body : "*"
    };
  };
  rpc Toggle(infinimesh.node.accounts.Account)
      returns (infinimesh.node.accounts.Account) {
    option (google.api.http) = {
      post : "/accounts/{uuid}/toggle"
      body : "*"
    };
  };

  rpc Delete(infinimesh.node.accounts.Account) returns (DeleteResponse) {
    option (google.api.http) = {
      delete : "/accounts/{uuid}"
    };
  };
  rpc Accessibles(infinimesh.node.namespaces.Namespace)
      returns (infinimesh.node.access.Nodes) {
    option (google.api.http) = {
      get : "/accounts/{uuid}/accessibles"
    };
  };
  rpc Deletables(infinimesh.node.accounts.Account)
      returns (infinimesh.node.access.Nodes) {
    option (google.api.http) = {
      get : "/accounts/{uuid}/deletables"
    };
  };

  rpc Move(MoveRequest) returns (EmptyMessage) {
    option (google.api.http) = {
      post : "/accounts/{uuid}/namespace"
      body : "*"
    };
  };

  rpc GetCredentials(GetCredentialsRequest) returns (GetCredentialsResponse) {
    option (google.api.http) = {
      get : "/accounts/{uuid}/credentials"
    };
  };
  rpc SetCredentials(SetCredentialsRequest) returns (SetCredentialsResponse) {
    option (google.api.http) = {
      post : "/accounts/{uuid}/credentials"
      body : "*"
    };
  };
  rpc DelCredentials(DeleteCredentialsRequest) returns (DeleteResponse) {
    option (google.api.http) = {
      delete : "/accounts/{uuid}/credentials/{type}"
    };
  };
}

import "node/sessions/sessions.proto";

service SessionsService {
  rpc Get(EmptyMessage) returns (infinimesh.node.sessions.Sessions) {
    option (google.api.http) = {
      get : "/sessions"
    };
  };
  rpc Revoke(infinimesh.node.sessions.Session) returns (DeleteResponse) {
    option (google.api.http) = {
      delete : "/sessions/{id}"
    };
  };
  rpc GetActivity(EmptyMessage) returns (infinimesh.node.sessions.Sessions) {
    option (google.api.http) = {
      get : "/sessions/activity"
    };
  };
}

import "node/namespaces/namespaces.proto";

message JoinRequest {
  string namespace = 1;
  string account = 2;
  infinimesh.node.access.Level access = 3;
}

// Generally, adds link like | join ---access---> node |
message JoinGeneralRequest {
  string node = 1; // Node to make Join to (can be interpret differenetly
                   // depending on Controller)
  string join = 2; // Node to make Join from (can be interpret differenetly
                   // depending on Controller)
  infinimesh.node.access.Level access = 3;
}

service NamespacesService {
  rpc Get(infinimesh.node.namespaces.Namespace)
      returns (infinimesh.node.namespaces.Namespace) {
    option (google.api.http) = {
      get : "/namespaces/{uuid}"
    };
  };
  rpc List(EmptyMessage) returns (infinimesh.node.namespaces.Namespaces) {
    option (google.api.http) = {
      get : "/namespaces"
    };
  };

  rpc Create(infinimesh.node.namespaces.Namespace)
      returns (infinimesh.node.namespaces.Namespace) {
    option (google.api.http) = {
      put : "/namespaces"
      body : "*"
    };
  };
  rpc Update(infinimesh.node.namespaces.Namespace)
      returns (infinimesh.node.namespaces.Namespace) {
    option (google.api.http) = {
      patch : "/namespaces/{uuid}"
      body : "*"
    };
  };
  rpc Delete(infinimesh.node.namespaces.Namespace) returns (DeleteResponse) {
    option (google.api.http) = {
      delete : "/namespaces/{uuid}"
    };
  };
  rpc Accessibles(infinimesh.node.namespaces.Namespace)
      returns (infinimesh.node.access.Nodes) {
    option (google.api.http) = {
      get : "/namespaces/{uuid}/accessibles"
    };
  };
  rpc Deletables(infinimesh.node.namespaces.Namespace)
      returns (infinimesh.node.access.Nodes) {
    option (google.api.http) = {
      get : "/namespaces/{uuid}/deletables"
    };
  };

  // Accounts having access to this namespace
  rpc Joins(infinimesh.node.namespaces.Namespace)
      returns (infinimesh.node.accounts.Accounts) {
    option (google.api.http) = {
      get : "/namespaces/{uuid}/joins"
    };
  }
  // Sets Access to this namespace for the given account(deletes if level is set
  // to NONE(0))
  rpc Join(JoinRequest) returns (infinimesh.node.accounts.Accounts) {
    option (google.api.http) = {
      post : "/namespaces/{namespace}/join"
      body : "*"
    };
  }
}

import "node/devices/devices.proto";

message DevicesTokenRequest {
  repeated string devices = 1;
  int64 exp = 2;
  bool post = 3;
}

service DevicesService {
  rpc Get(infinimesh.node.devices.Device)
      returns (infinimesh.node.devices.Device) {
    option (google.api.http) = {
      get : "/devices/{uuid}"
    };
  };
  rpc List(QueryRequest) returns (infinimesh.node.devices.Devices) {
    option (google.api.http) = {
      get : "/devices"
    };
  };

  rpc Create(infinimesh.node.devices.CreateRequest)
      returns (infinimesh.node.devices.CreateResponse) {
    option (google.api.http) = {
      put : "/devices"
      body : "*"
    };
  };
  rpc Update(infinimesh.node.devices.Device)
      returns (infinimesh.node.devices.Device) {
    option (google.api.http) = {
      patch : "/devices/{uuid}"
      body : "*"
    };
  };
  rpc Delete(infinimesh.node.devices.Device) returns (DeleteResponse) {
    option (google.api.http) = {
      delete : "/devices/{uuid}"
    };
  };

  rpc Toggle(infinimesh.node.devices.Device)
      returns (infinimesh.node.devices.Device) {
    option (google.api.http) = {
      post : "/devices/{uuid}/toggle"
      body : "*"
    };
  };
  rpc ToggleBasic(infinimesh.node.devices.Device)
      returns (infinimesh.node.devices.Device) {
    option (google.api.http) = {
      post : "/devices/{uuid}/toggle/basic"
      body : "*"
    };
  };

  rpc MakeDevicesToken(DevicesTokenRequest) returns (TokenResponse) {
    option (google.api.http) = {
      post : "/devices/token"
      body : "*"
    };
  };

  // Moves Device between Namespaces
  rpc Move(MoveRequest) returns (EmptyMessage) {
    option (google.api.http) = {
      post : "/devices/{uuid}/namespace"
      body : "*"
    };
  };
  // Accounts and Namesapces having access to this Device
  rpc Joins(infinimesh.node.devices.Device)
      returns (infinimesh.node.access.Nodes) {
    option (google.api.http) = {
      get : "/devices/{uuid}/joins"
    };
  }
  // Sets Access to this namespace for the given Node(Account or Namespace)
  // (deletes if level is set to NONE(0)) Node is interpret as a Device (uuid is
  // enough) and Join as an Account or Namespace (must be provided fully)
  rpc Join(JoinGeneralRequest) returns (infinimesh.node.access.Node) {
    option (google.api.http) = {
      post : "/devices/join"
      body : "*"
    };
  }

  rpc GetByToken(infinimesh.node.devices.Device)
      returns (infinimesh.node.devices.Device);
  rpc GetByFingerprint(infinimesh.node.devices.GetByFingerprintRequest)
      returns (infinimesh.node.devices.Device);
}

import "shadow/shadow.proto";

service ShadowService {
  rpc Get(infinimesh.shadow.GetRequest)
      returns (infinimesh.shadow.GetResponse) {
    option (google.api.http) = {
      get : "/devices/states"
    };
  };
  rpc Patch(infinimesh.shadow.Shadow) returns (infinimesh.shadow.Shadow) {
    option (google.api.http) = {
      post : "/devices/states"
      body : "*"
    };
  };
  rpc Remove(infinimesh.shadow.RemoveRequest)
      returns (infinimesh.shadow.Shadow) {
    option (google.api.http) = {
      post : "/devices/states/remove"
      body : "*"
    };
  };
  rpc StreamShadow(infinimesh.shadow.StreamShadowRequest)
      returns (stream infinimesh.shadow.Shadow) {
    option (google.api.http) = {
      get : "/devices/states/stream"
    };
  };
  rpc StreamShadowSync(infinimesh.shadow.StreamShadowRequest)
      returns (stream infinimesh.shadow.Shadow) {
    option (google.api.http) = {
      get : "/devices/states/stream/sync"
    };
  };
}

message LDAPProviders {
  map<string, string> providers =
      1; // map of keys to titles (titles can be empty)
}

service InternalService { // not revenue
  rpc GetLDAPProviders(EmptyMessage) returns (LDAPProviders) {
    option (google.api.http) = {
      get : "/i/ldapp"
    };
  }
}