/*
Copyright Â© 2021-2022 Infinite Devices GmbH, Nikita Ivanovski info@slnt-opp.xyz

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
syntax = "proto3";
package infinimesh.node;

import "google/api/annotations.proto";
import "node/accounts/accounts.proto";
import "node/access/access.proto";

message TokenRequest {
  infinimesh.node.accounts.Credentials auth = 1;
  int64 exp = 2;
  optional string uuid = 3;
}

message TokenResponse {
  string token = 1;
}

message SetCredentialsRequest {
  string uuid = 1;
  infinimesh.node.accounts.Credentials credentials = 2;
}

message SetCredentialsResponse {}
message DeleteResponse {}
message EmptyMessage {}

service AccountsService {
  rpc Token(TokenRequest) returns (TokenResponse) {
    option (google.api.http) = {
      post: "/token"
      body: "*"
    };
  };

  rpc Get(infinimesh.node.accounts.Account) returns (infinimesh.node.accounts.Account) {
    option (google.api.http) = {
      get: "/accounts/{uuid}"
    };
  };
  rpc List(EmptyMessage) returns (infinimesh.node.accounts.Accounts) {
    option (google.api.http) = {
      get: "/accounts"
    };
  };

  rpc Create(infinimesh.node.accounts.CreateRequest) returns (infinimesh.node.accounts.CreateResponse) {
    option (google.api.http) = {
      put: "/accounts"
      body: "*"
    };
  };
  rpc Update(infinimesh.node.accounts.Account) returns (infinimesh.node.accounts.Account) {
    option (google.api.http) = {
      patch: "/accounts/{uuid}"
      body: "*"
    };
  };
  rpc Toggle(infinimesh.node.accounts.Account) returns (infinimesh.node.accounts.Account) {
    option (google.api.http) = {
      post: "/accounts/{uuid}/toggle"
      body: "*"
    };
  };  

  rpc Delete(infinimesh.node.accounts.Account) returns (DeleteResponse) {
    option (google.api.http) = {
      delete: "/accounts/{uuid}"
    };
  };
  rpc Deletables(infinimesh.node.accounts.Account) returns (infinimesh.node.access.Nodes) {
    option (google.api.http) = {
      get: "/accounts/{uuid}/deletables"
    };
  };

  rpc SetCredentials(SetCredentialsRequest) returns (SetCredentialsResponse) {
    option (google.api.http) = {
      post: "/accounts/{uuid}/credentials"
      body: "*"
    };
  };
}

import "node/namespaces/namespaces.proto";

message JoinRequest {
  string namespace = 1;
  string account = 2;
  infinimesh.node.access.Level access = 3;
}

service NamespacesService {
  rpc Get(infinimesh.node.namespaces.Namespace) returns (infinimesh.node.namespaces.Namespace) {
    option (google.api.http) = {
      get: "/namespaces/{uuid}"
    };
  };
  rpc List(EmptyMessage) returns (infinimesh.node.namespaces.Namespaces) {
    option (google.api.http) = {
      get: "/namespaces"
    };
  };

  rpc Create(infinimesh.node.namespaces.Namespace) returns (infinimesh.node.namespaces.Namespace) {
    option (google.api.http) = {
      put: "/namespaces"
      body: "*"
    };
  };
  rpc Update(infinimesh.node.namespaces.Namespace) returns (infinimesh.node.namespaces.Namespace) {
    option (google.api.http) = {
      patch: "/namespaces/{uuid}"
      body: "*"
    };
  };
  rpc Delete(infinimesh.node.namespaces.Namespace) returns (DeleteResponse) {
    option (google.api.http) = {
      delete: "/namespaces/{uuid}"
    };
  };
  rpc Deletables(infinimesh.node.namespaces.Namespace) returns (infinimesh.node.access.Nodes) {
    option (google.api.http) = {
      get: "/namespaces/{uuid}/deletables"
    };
  };

  // Accounts having access to this namespace
  rpc Joins(infinimesh.node.namespaces.Namespace) returns (infinimesh.node.accounts.Accounts) {
    option (google.api.http) = {
      get: "/namespaces/{uuid}/joins"
    };
  }
  // Sets Access to this namespace for the given account(deletes if level is set to NONE(0))
  rpc Join(JoinRequest) returns (infinimesh.node.accounts.Accounts) {
    option (google.api.http) = {
      post: "/namespaces/{namespace}/join"
      body: "*"
    };
  }
}

import "node/devices/devices.proto";

message DevicesTokenRequest {
  repeated string devices = 1;
  int64 exp = 2;
  bool post = 3;
}

service DevicesService {
  rpc Get(infinimesh.node.devices.Device) returns (infinimesh.node.devices.Device) {
    option (google.api.http) = {
      get: "/devices/{uuid}"
    };
  };
  rpc List(EmptyMessage) returns (infinimesh.node.devices.Devices) {
    option (google.api.http) = {
      get: "/devices"
    };
  };

  rpc Create(infinimesh.node.devices.CreateRequest) returns (infinimesh.node.devices.CreateResponse) {
    option (google.api.http) = {
      put: "/devices"
      body: "*"
    };
  };
  rpc Update(infinimesh.node.devices.Device) returns (infinimesh.node.devices.Device) {
    option (google.api.http) = {
      patch: "/devices/{uuid}"
      body: "*"
    };
  };
  rpc Delete(infinimesh.node.devices.Device) returns (DeleteResponse) {
    option (google.api.http) = {
      delete: "/devices/{uuid}"
    };
  };

  rpc Toggle(infinimesh.node.devices.Device) returns (infinimesh.node.devices.Device) {
    option (google.api.http) = {
      post: "/devices/{uuid}/toggle"
      body: "*"
    };
  };
  rpc ToggleBasic(infinimesh.node.devices.Device) returns (infinimesh.node.devices.Device) {
    option (google.api.http) = {
      post: "/devices/{uuid}/toggle/basic"
      body: "*"
    };
  };

  rpc MakeDevicesToken(DevicesTokenRequest) returns (TokenResponse) {
    option (google.api.http) = {
      post: "/devices/token"
      body: "*"
    };
  };

  rpc GetByToken(infinimesh.node.devices.Device) returns (infinimesh.node.devices.Device);
  rpc GetByFingerprint(infinimesh.node.devices.GetByFingerprintRequest) returns (infinimesh.node.devices.Device);
}

import "shadow/shadow.proto";

service ShadowService {
  rpc Get(infinimesh.shadow.GetRequest) returns (infinimesh.shadow.GetResponse) {
    option (google.api.http) = {
      get: "/devices/states"
    };
  };
  rpc Patch(infinimesh.shadow.Shadow) returns (infinimesh.shadow.Shadow) {
    option (google.api.http) = {
      post: "/devices/states"
      body: "*"
    };
  };
  rpc StreamShadow(infinimesh.shadow.StreamShadowRequest)
      returns (stream infinimesh.shadow.Shadow) {
    option (google.api.http) = {
      get : "/devices/states/stream"
    };
  }
}