// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: node/node.proto

package node

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	access "github.com/infinimesh/proto/node/access"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = access.Level(0)
)

// Validate checks the field values on TokenRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TokenRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TokenRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TokenRequestMultiError, or
// nil if none found.
func (m *TokenRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TokenRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAuth()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TokenRequestValidationError{
					field:  "Auth",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TokenRequestValidationError{
					field:  "Auth",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAuth()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TokenRequestValidationError{
				field:  "Auth",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Exp

	if m.Uuid != nil {
		// no validation rules for Uuid
	}

	if m.Inf != nil {
		// no validation rules for Inf
	}

	if m.Client != nil {
		// no validation rules for Client
	}

	if len(errors) > 0 {
		return TokenRequestMultiError(errors)
	}

	return nil
}

// TokenRequestMultiError is an error wrapping multiple validation errors
// returned by TokenRequest.ValidateAll() if the designated constraints aren't met.
type TokenRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TokenRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TokenRequestMultiError) AllErrors() []error { return m }

// TokenRequestValidationError is the validation error returned by
// TokenRequest.Validate if the designated constraints aren't met.
type TokenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TokenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TokenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TokenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TokenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TokenRequestValidationError) ErrorName() string { return "TokenRequestValidationError" }

// Error satisfies the builtin error interface
func (e TokenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTokenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TokenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TokenRequestValidationError{}

// Validate checks the field values on TokenResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TokenResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TokenResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TokenResponseMultiError, or
// nil if none found.
func (m *TokenResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TokenResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	if len(errors) > 0 {
		return TokenResponseMultiError(errors)
	}

	return nil
}

// TokenResponseMultiError is an error wrapping multiple validation errors
// returned by TokenResponse.ValidateAll() if the designated constraints
// aren't met.
type TokenResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TokenResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TokenResponseMultiError) AllErrors() []error { return m }

// TokenResponseValidationError is the validation error returned by
// TokenResponse.Validate if the designated constraints aren't met.
type TokenResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TokenResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TokenResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TokenResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TokenResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TokenResponseValidationError) ErrorName() string { return "TokenResponseValidationError" }

// Error satisfies the builtin error interface
func (e TokenResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTokenResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TokenResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TokenResponseValidationError{}

// Validate checks the field values on SetCredentialsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetCredentialsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetCredentialsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetCredentialsRequestMultiError, or nil if none found.
func (m *SetCredentialsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SetCredentialsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uuid

	if all {
		switch v := interface{}(m.GetCredentials()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SetCredentialsRequestValidationError{
					field:  "Credentials",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SetCredentialsRequestValidationError{
					field:  "Credentials",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCredentials()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetCredentialsRequestValidationError{
				field:  "Credentials",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SetCredentialsRequestMultiError(errors)
	}

	return nil
}

// SetCredentialsRequestMultiError is an error wrapping multiple validation
// errors returned by SetCredentialsRequest.ValidateAll() if the designated
// constraints aren't met.
type SetCredentialsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetCredentialsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetCredentialsRequestMultiError) AllErrors() []error { return m }

// SetCredentialsRequestValidationError is the validation error returned by
// SetCredentialsRequest.Validate if the designated constraints aren't met.
type SetCredentialsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetCredentialsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetCredentialsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetCredentialsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetCredentialsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetCredentialsRequestValidationError) ErrorName() string {
	return "SetCredentialsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetCredentialsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetCredentialsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetCredentialsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetCredentialsRequestValidationError{}

// Validate checks the field values on SetCredentialsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetCredentialsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetCredentialsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetCredentialsResponseMultiError, or nil if none found.
func (m *SetCredentialsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SetCredentialsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SetCredentialsResponseMultiError(errors)
	}

	return nil
}

// SetCredentialsResponseMultiError is an error wrapping multiple validation
// errors returned by SetCredentialsResponse.ValidateAll() if the designated
// constraints aren't met.
type SetCredentialsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetCredentialsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetCredentialsResponseMultiError) AllErrors() []error { return m }

// SetCredentialsResponseValidationError is the validation error returned by
// SetCredentialsResponse.Validate if the designated constraints aren't met.
type SetCredentialsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetCredentialsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetCredentialsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetCredentialsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetCredentialsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetCredentialsResponseValidationError) ErrorName() string {
	return "SetCredentialsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SetCredentialsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetCredentialsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetCredentialsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetCredentialsResponseValidationError{}

// Validate checks the field values on GetCredentialsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCredentialsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCredentialsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCredentialsRequestMultiError, or nil if none found.
func (m *GetCredentialsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCredentialsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uuid

	if len(errors) > 0 {
		return GetCredentialsRequestMultiError(errors)
	}

	return nil
}

// GetCredentialsRequestMultiError is an error wrapping multiple validation
// errors returned by GetCredentialsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetCredentialsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCredentialsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCredentialsRequestMultiError) AllErrors() []error { return m }

// GetCredentialsRequestValidationError is the validation error returned by
// GetCredentialsRequest.Validate if the designated constraints aren't met.
type GetCredentialsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCredentialsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCredentialsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCredentialsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCredentialsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCredentialsRequestValidationError) ErrorName() string {
	return "GetCredentialsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCredentialsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCredentialsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCredentialsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCredentialsRequestValidationError{}

// Validate checks the field values on GetCredentialsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCredentialsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCredentialsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCredentialsResponseMultiError, or nil if none found.
func (m *GetCredentialsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCredentialsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCredentials() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetCredentialsResponseValidationError{
						field:  fmt.Sprintf("Credentials[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetCredentialsResponseValidationError{
						field:  fmt.Sprintf("Credentials[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetCredentialsResponseValidationError{
					field:  fmt.Sprintf("Credentials[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetCredentialsResponseMultiError(errors)
	}

	return nil
}

// GetCredentialsResponseMultiError is an error wrapping multiple validation
// errors returned by GetCredentialsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetCredentialsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCredentialsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCredentialsResponseMultiError) AllErrors() []error { return m }

// GetCredentialsResponseValidationError is the validation error returned by
// GetCredentialsResponse.Validate if the designated constraints aren't met.
type GetCredentialsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCredentialsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCredentialsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCredentialsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCredentialsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCredentialsResponseValidationError) ErrorName() string {
	return "GetCredentialsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCredentialsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCredentialsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCredentialsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCredentialsResponseValidationError{}

// Validate checks the field values on DeleteCredentialsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCredentialsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCredentialsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCredentialsRequestMultiError, or nil if none found.
func (m *DeleteCredentialsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCredentialsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uuid

	// no validation rules for Type

	if len(errors) > 0 {
		return DeleteCredentialsRequestMultiError(errors)
	}

	return nil
}

// DeleteCredentialsRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteCredentialsRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteCredentialsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCredentialsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCredentialsRequestMultiError) AllErrors() []error { return m }

// DeleteCredentialsRequestValidationError is the validation error returned by
// DeleteCredentialsRequest.Validate if the designated constraints aren't met.
type DeleteCredentialsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCredentialsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCredentialsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCredentialsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCredentialsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCredentialsRequestValidationError) ErrorName() string {
	return "DeleteCredentialsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCredentialsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCredentialsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCredentialsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCredentialsRequestValidationError{}

// Validate checks the field values on DeleteResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeleteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeleteResponseMultiError,
// or nil if none found.
func (m *DeleteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteResponseMultiError(errors)
	}

	return nil
}

// DeleteResponseMultiError is an error wrapping multiple validation errors
// returned by DeleteResponse.ValidateAll() if the designated constraints
// aren't met.
type DeleteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteResponseMultiError) AllErrors() []error { return m }

// DeleteResponseValidationError is the validation error returned by
// DeleteResponse.Validate if the designated constraints aren't met.
type DeleteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteResponseValidationError) ErrorName() string { return "DeleteResponseValidationError" }

// Error satisfies the builtin error interface
func (e DeleteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteResponseValidationError{}

// Validate checks the field values on EmptyMessage with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EmptyMessage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EmptyMessage with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EmptyMessageMultiError, or
// nil if none found.
func (m *EmptyMessage) ValidateAll() error {
	return m.validate(true)
}

func (m *EmptyMessage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return EmptyMessageMultiError(errors)
	}

	return nil
}

// EmptyMessageMultiError is an error wrapping multiple validation errors
// returned by EmptyMessage.ValidateAll() if the designated constraints aren't met.
type EmptyMessageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EmptyMessageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EmptyMessageMultiError) AllErrors() []error { return m }

// EmptyMessageValidationError is the validation error returned by
// EmptyMessage.Validate if the designated constraints aren't met.
type EmptyMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EmptyMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EmptyMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EmptyMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EmptyMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EmptyMessageValidationError) ErrorName() string { return "EmptyMessageValidationError" }

// Error satisfies the builtin error interface
func (e EmptyMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEmptyMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EmptyMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EmptyMessageValidationError{}

// Validate checks the field values on QueryRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *QueryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in QueryRequestMultiError, or
// nil if none found.
func (m *QueryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Namespace != nil {
		// no validation rules for Namespace
	}

	if m.Account != nil {
		// no validation rules for Account
	}

	if len(errors) > 0 {
		return QueryRequestMultiError(errors)
	}

	return nil
}

// QueryRequestMultiError is an error wrapping multiple validation errors
// returned by QueryRequest.ValidateAll() if the designated constraints aren't met.
type QueryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryRequestMultiError) AllErrors() []error { return m }

// QueryRequestValidationError is the validation error returned by
// QueryRequest.Validate if the designated constraints aren't met.
type QueryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryRequestValidationError) ErrorName() string { return "QueryRequestValidationError" }

// Error satisfies the builtin error interface
func (e QueryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryRequestValidationError{}

// Validate checks the field values on MoveRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MoveRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MoveRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MoveRequestMultiError, or
// nil if none found.
func (m *MoveRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *MoveRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uuid

	// no validation rules for Namespace

	if len(errors) > 0 {
		return MoveRequestMultiError(errors)
	}

	return nil
}

// MoveRequestMultiError is an error wrapping multiple validation errors
// returned by MoveRequest.ValidateAll() if the designated constraints aren't met.
type MoveRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MoveRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MoveRequestMultiError) AllErrors() []error { return m }

// MoveRequestValidationError is the validation error returned by
// MoveRequest.Validate if the designated constraints aren't met.
type MoveRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MoveRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MoveRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MoveRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MoveRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MoveRequestValidationError) ErrorName() string { return "MoveRequestValidationError" }

// Error satisfies the builtin error interface
func (e MoveRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMoveRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MoveRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MoveRequestValidationError{}

// Validate checks the field values on JoinRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *JoinRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on JoinRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in JoinRequestMultiError, or
// nil if none found.
func (m *JoinRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *JoinRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Namespace

	// no validation rules for Account

	// no validation rules for Access

	if len(errors) > 0 {
		return JoinRequestMultiError(errors)
	}

	return nil
}

// JoinRequestMultiError is an error wrapping multiple validation errors
// returned by JoinRequest.ValidateAll() if the designated constraints aren't met.
type JoinRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JoinRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JoinRequestMultiError) AllErrors() []error { return m }

// JoinRequestValidationError is the validation error returned by
// JoinRequest.Validate if the designated constraints aren't met.
type JoinRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JoinRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JoinRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JoinRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JoinRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JoinRequestValidationError) ErrorName() string { return "JoinRequestValidationError" }

// Error satisfies the builtin error interface
func (e JoinRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJoinRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JoinRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JoinRequestValidationError{}

// Validate checks the field values on JoinGeneralRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *JoinGeneralRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on JoinGeneralRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// JoinGeneralRequestMultiError, or nil if none found.
func (m *JoinGeneralRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *JoinGeneralRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Node

	// no validation rules for Join

	// no validation rules for Access

	if len(errors) > 0 {
		return JoinGeneralRequestMultiError(errors)
	}

	return nil
}

// JoinGeneralRequestMultiError is an error wrapping multiple validation errors
// returned by JoinGeneralRequest.ValidateAll() if the designated constraints
// aren't met.
type JoinGeneralRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JoinGeneralRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JoinGeneralRequestMultiError) AllErrors() []error { return m }

// JoinGeneralRequestValidationError is the validation error returned by
// JoinGeneralRequest.Validate if the designated constraints aren't met.
type JoinGeneralRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JoinGeneralRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JoinGeneralRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JoinGeneralRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JoinGeneralRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JoinGeneralRequestValidationError) ErrorName() string {
	return "JoinGeneralRequestValidationError"
}

// Error satisfies the builtin error interface
func (e JoinGeneralRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJoinGeneralRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JoinGeneralRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JoinGeneralRequestValidationError{}

// Validate checks the field values on DevicesTokenRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DevicesTokenRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DevicesTokenRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DevicesTokenRequestMultiError, or nil if none found.
func (m *DevicesTokenRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DevicesTokenRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Devices

	// no validation rules for Exp

	if len(errors) > 0 {
		return DevicesTokenRequestMultiError(errors)
	}

	return nil
}

// DevicesTokenRequestMultiError is an error wrapping multiple validation
// errors returned by DevicesTokenRequest.ValidateAll() if the designated
// constraints aren't met.
type DevicesTokenRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DevicesTokenRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DevicesTokenRequestMultiError) AllErrors() []error { return m }

// DevicesTokenRequestValidationError is the validation error returned by
// DevicesTokenRequest.Validate if the designated constraints aren't met.
type DevicesTokenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DevicesTokenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DevicesTokenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DevicesTokenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DevicesTokenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DevicesTokenRequestValidationError) ErrorName() string {
	return "DevicesTokenRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DevicesTokenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDevicesTokenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DevicesTokenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DevicesTokenRequestValidationError{}

// Validate checks the field values on LDAPProviders with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LDAPProviders) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LDAPProviders with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LDAPProvidersMultiError, or
// nil if none found.
func (m *LDAPProviders) ValidateAll() error {
	return m.validate(true)
}

func (m *LDAPProviders) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Providers

	if len(errors) > 0 {
		return LDAPProvidersMultiError(errors)
	}

	return nil
}

// LDAPProvidersMultiError is an error wrapping multiple validation errors
// returned by LDAPProviders.ValidateAll() if the designated constraints
// aren't met.
type LDAPProvidersMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LDAPProvidersMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LDAPProvidersMultiError) AllErrors() []error { return m }

// LDAPProvidersValidationError is the validation error returned by
// LDAPProviders.Validate if the designated constraints aren't met.
type LDAPProvidersValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LDAPProvidersValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LDAPProvidersValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LDAPProvidersValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LDAPProvidersValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LDAPProvidersValidationError) ErrorName() string { return "LDAPProvidersValidationError" }

// Error satisfies the builtin error interface
func (e LDAPProvidersValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLDAPProviders.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LDAPProvidersValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LDAPProvidersValidationError{}
