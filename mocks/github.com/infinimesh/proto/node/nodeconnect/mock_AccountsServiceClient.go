// Code generated by mockery v2.40.1. DO NOT EDIT.

package nodeconnect_mocks

import (
	access "github.com/infinimesh/proto/node/access"
	accounts "github.com/infinimesh/proto/node/accounts"

	connect "connectrpc.com/connect"

	context "context"

	mock "github.com/stretchr/testify/mock"

	namespaces "github.com/infinimesh/proto/node/namespaces"

	node "github.com/infinimesh/proto/node"
)

// MockAccountsServiceClient is an autogenerated mock type for the AccountsServiceClient type
type MockAccountsServiceClient struct {
	mock.Mock
}

type MockAccountsServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAccountsServiceClient) EXPECT() *MockAccountsServiceClient_Expecter {
	return &MockAccountsServiceClient_Expecter{mock: &_m.Mock}
}

// Accessibles provides a mock function with given fields: _a0, _a1
func (_m *MockAccountsServiceClient) Accessibles(_a0 context.Context, _a1 *connect.Request[namespaces.Namespace]) (*connect.Response[access.Nodes], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Accessibles")
	}

	var r0 *connect.Response[access.Nodes]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[namespaces.Namespace]) (*connect.Response[access.Nodes], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[namespaces.Namespace]) *connect.Response[access.Nodes]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[access.Nodes])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[namespaces.Namespace]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountsServiceClient_Accessibles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Accessibles'
type MockAccountsServiceClient_Accessibles_Call struct {
	*mock.Call
}

// Accessibles is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *connect.Request[namespaces.Namespace]
func (_e *MockAccountsServiceClient_Expecter) Accessibles(_a0 interface{}, _a1 interface{}) *MockAccountsServiceClient_Accessibles_Call {
	return &MockAccountsServiceClient_Accessibles_Call{Call: _e.mock.On("Accessibles", _a0, _a1)}
}

func (_c *MockAccountsServiceClient_Accessibles_Call) Run(run func(_a0 context.Context, _a1 *connect.Request[namespaces.Namespace])) *MockAccountsServiceClient_Accessibles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connect.Request[namespaces.Namespace]))
	})
	return _c
}

func (_c *MockAccountsServiceClient_Accessibles_Call) Return(_a0 *connect.Response[access.Nodes], _a1 error) *MockAccountsServiceClient_Accessibles_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountsServiceClient_Accessibles_Call) RunAndReturn(run func(context.Context, *connect.Request[namespaces.Namespace]) (*connect.Response[access.Nodes], error)) *MockAccountsServiceClient_Accessibles_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: _a0, _a1
func (_m *MockAccountsServiceClient) Create(_a0 context.Context, _a1 *connect.Request[accounts.CreateRequest]) (*connect.Response[accounts.CreateResponse], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *connect.Response[accounts.CreateResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[accounts.CreateRequest]) (*connect.Response[accounts.CreateResponse], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[accounts.CreateRequest]) *connect.Response[accounts.CreateResponse]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[accounts.CreateResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[accounts.CreateRequest]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountsServiceClient_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockAccountsServiceClient_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *connect.Request[accounts.CreateRequest]
func (_e *MockAccountsServiceClient_Expecter) Create(_a0 interface{}, _a1 interface{}) *MockAccountsServiceClient_Create_Call {
	return &MockAccountsServiceClient_Create_Call{Call: _e.mock.On("Create", _a0, _a1)}
}

func (_c *MockAccountsServiceClient_Create_Call) Run(run func(_a0 context.Context, _a1 *connect.Request[accounts.CreateRequest])) *MockAccountsServiceClient_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connect.Request[accounts.CreateRequest]))
	})
	return _c
}

func (_c *MockAccountsServiceClient_Create_Call) Return(_a0 *connect.Response[accounts.CreateResponse], _a1 error) *MockAccountsServiceClient_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountsServiceClient_Create_Call) RunAndReturn(run func(context.Context, *connect.Request[accounts.CreateRequest]) (*connect.Response[accounts.CreateResponse], error)) *MockAccountsServiceClient_Create_Call {
	_c.Call.Return(run)
	return _c
}

// DelCredentials provides a mock function with given fields: _a0, _a1
func (_m *MockAccountsServiceClient) DelCredentials(_a0 context.Context, _a1 *connect.Request[node.DeleteCredentialsRequest]) (*connect.Response[node.DeleteResponse], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for DelCredentials")
	}

	var r0 *connect.Response[node.DeleteResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[node.DeleteCredentialsRequest]) (*connect.Response[node.DeleteResponse], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[node.DeleteCredentialsRequest]) *connect.Response[node.DeleteResponse]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[node.DeleteResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[node.DeleteCredentialsRequest]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountsServiceClient_DelCredentials_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DelCredentials'
type MockAccountsServiceClient_DelCredentials_Call struct {
	*mock.Call
}

// DelCredentials is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *connect.Request[node.DeleteCredentialsRequest]
func (_e *MockAccountsServiceClient_Expecter) DelCredentials(_a0 interface{}, _a1 interface{}) *MockAccountsServiceClient_DelCredentials_Call {
	return &MockAccountsServiceClient_DelCredentials_Call{Call: _e.mock.On("DelCredentials", _a0, _a1)}
}

func (_c *MockAccountsServiceClient_DelCredentials_Call) Run(run func(_a0 context.Context, _a1 *connect.Request[node.DeleteCredentialsRequest])) *MockAccountsServiceClient_DelCredentials_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connect.Request[node.DeleteCredentialsRequest]))
	})
	return _c
}

func (_c *MockAccountsServiceClient_DelCredentials_Call) Return(_a0 *connect.Response[node.DeleteResponse], _a1 error) *MockAccountsServiceClient_DelCredentials_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountsServiceClient_DelCredentials_Call) RunAndReturn(run func(context.Context, *connect.Request[node.DeleteCredentialsRequest]) (*connect.Response[node.DeleteResponse], error)) *MockAccountsServiceClient_DelCredentials_Call {
	_c.Call.Return(run)
	return _c
}

// Deletables provides a mock function with given fields: _a0, _a1
func (_m *MockAccountsServiceClient) Deletables(_a0 context.Context, _a1 *connect.Request[accounts.Account]) (*connect.Response[access.Nodes], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Deletables")
	}

	var r0 *connect.Response[access.Nodes]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[accounts.Account]) (*connect.Response[access.Nodes], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[accounts.Account]) *connect.Response[access.Nodes]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[access.Nodes])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[accounts.Account]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountsServiceClient_Deletables_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Deletables'
type MockAccountsServiceClient_Deletables_Call struct {
	*mock.Call
}

// Deletables is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *connect.Request[accounts.Account]
func (_e *MockAccountsServiceClient_Expecter) Deletables(_a0 interface{}, _a1 interface{}) *MockAccountsServiceClient_Deletables_Call {
	return &MockAccountsServiceClient_Deletables_Call{Call: _e.mock.On("Deletables", _a0, _a1)}
}

func (_c *MockAccountsServiceClient_Deletables_Call) Run(run func(_a0 context.Context, _a1 *connect.Request[accounts.Account])) *MockAccountsServiceClient_Deletables_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connect.Request[accounts.Account]))
	})
	return _c
}

func (_c *MockAccountsServiceClient_Deletables_Call) Return(_a0 *connect.Response[access.Nodes], _a1 error) *MockAccountsServiceClient_Deletables_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountsServiceClient_Deletables_Call) RunAndReturn(run func(context.Context, *connect.Request[accounts.Account]) (*connect.Response[access.Nodes], error)) *MockAccountsServiceClient_Deletables_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: _a0, _a1
func (_m *MockAccountsServiceClient) Delete(_a0 context.Context, _a1 *connect.Request[accounts.Account]) (*connect.Response[node.DeleteResponse], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 *connect.Response[node.DeleteResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[accounts.Account]) (*connect.Response[node.DeleteResponse], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[accounts.Account]) *connect.Response[node.DeleteResponse]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[node.DeleteResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[accounts.Account]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountsServiceClient_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockAccountsServiceClient_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *connect.Request[accounts.Account]
func (_e *MockAccountsServiceClient_Expecter) Delete(_a0 interface{}, _a1 interface{}) *MockAccountsServiceClient_Delete_Call {
	return &MockAccountsServiceClient_Delete_Call{Call: _e.mock.On("Delete", _a0, _a1)}
}

func (_c *MockAccountsServiceClient_Delete_Call) Run(run func(_a0 context.Context, _a1 *connect.Request[accounts.Account])) *MockAccountsServiceClient_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connect.Request[accounts.Account]))
	})
	return _c
}

func (_c *MockAccountsServiceClient_Delete_Call) Return(_a0 *connect.Response[node.DeleteResponse], _a1 error) *MockAccountsServiceClient_Delete_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountsServiceClient_Delete_Call) RunAndReturn(run func(context.Context, *connect.Request[accounts.Account]) (*connect.Response[node.DeleteResponse], error)) *MockAccountsServiceClient_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: _a0, _a1
func (_m *MockAccountsServiceClient) Get(_a0 context.Context, _a1 *connect.Request[accounts.Account]) (*connect.Response[accounts.Account], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *connect.Response[accounts.Account]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[accounts.Account]) (*connect.Response[accounts.Account], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[accounts.Account]) *connect.Response[accounts.Account]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[accounts.Account])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[accounts.Account]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountsServiceClient_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockAccountsServiceClient_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *connect.Request[accounts.Account]
func (_e *MockAccountsServiceClient_Expecter) Get(_a0 interface{}, _a1 interface{}) *MockAccountsServiceClient_Get_Call {
	return &MockAccountsServiceClient_Get_Call{Call: _e.mock.On("Get", _a0, _a1)}
}

func (_c *MockAccountsServiceClient_Get_Call) Run(run func(_a0 context.Context, _a1 *connect.Request[accounts.Account])) *MockAccountsServiceClient_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connect.Request[accounts.Account]))
	})
	return _c
}

func (_c *MockAccountsServiceClient_Get_Call) Return(_a0 *connect.Response[accounts.Account], _a1 error) *MockAccountsServiceClient_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountsServiceClient_Get_Call) RunAndReturn(run func(context.Context, *connect.Request[accounts.Account]) (*connect.Response[accounts.Account], error)) *MockAccountsServiceClient_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetCredentials provides a mock function with given fields: _a0, _a1
func (_m *MockAccountsServiceClient) GetCredentials(_a0 context.Context, _a1 *connect.Request[node.GetCredentialsRequest]) (*connect.Response[node.GetCredentialsResponse], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetCredentials")
	}

	var r0 *connect.Response[node.GetCredentialsResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[node.GetCredentialsRequest]) (*connect.Response[node.GetCredentialsResponse], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[node.GetCredentialsRequest]) *connect.Response[node.GetCredentialsResponse]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[node.GetCredentialsResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[node.GetCredentialsRequest]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountsServiceClient_GetCredentials_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCredentials'
type MockAccountsServiceClient_GetCredentials_Call struct {
	*mock.Call
}

// GetCredentials is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *connect.Request[node.GetCredentialsRequest]
func (_e *MockAccountsServiceClient_Expecter) GetCredentials(_a0 interface{}, _a1 interface{}) *MockAccountsServiceClient_GetCredentials_Call {
	return &MockAccountsServiceClient_GetCredentials_Call{Call: _e.mock.On("GetCredentials", _a0, _a1)}
}

func (_c *MockAccountsServiceClient_GetCredentials_Call) Run(run func(_a0 context.Context, _a1 *connect.Request[node.GetCredentialsRequest])) *MockAccountsServiceClient_GetCredentials_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connect.Request[node.GetCredentialsRequest]))
	})
	return _c
}

func (_c *MockAccountsServiceClient_GetCredentials_Call) Return(_a0 *connect.Response[node.GetCredentialsResponse], _a1 error) *MockAccountsServiceClient_GetCredentials_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountsServiceClient_GetCredentials_Call) RunAndReturn(run func(context.Context, *connect.Request[node.GetCredentialsRequest]) (*connect.Response[node.GetCredentialsResponse], error)) *MockAccountsServiceClient_GetCredentials_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: _a0, _a1
func (_m *MockAccountsServiceClient) List(_a0 context.Context, _a1 *connect.Request[node.EmptyMessage]) (*connect.Response[accounts.Accounts], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 *connect.Response[accounts.Accounts]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[node.EmptyMessage]) (*connect.Response[accounts.Accounts], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[node.EmptyMessage]) *connect.Response[accounts.Accounts]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[accounts.Accounts])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[node.EmptyMessage]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountsServiceClient_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockAccountsServiceClient_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *connect.Request[node.EmptyMessage]
func (_e *MockAccountsServiceClient_Expecter) List(_a0 interface{}, _a1 interface{}) *MockAccountsServiceClient_List_Call {
	return &MockAccountsServiceClient_List_Call{Call: _e.mock.On("List", _a0, _a1)}
}

func (_c *MockAccountsServiceClient_List_Call) Run(run func(_a0 context.Context, _a1 *connect.Request[node.EmptyMessage])) *MockAccountsServiceClient_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connect.Request[node.EmptyMessage]))
	})
	return _c
}

func (_c *MockAccountsServiceClient_List_Call) Return(_a0 *connect.Response[accounts.Accounts], _a1 error) *MockAccountsServiceClient_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountsServiceClient_List_Call) RunAndReturn(run func(context.Context, *connect.Request[node.EmptyMessage]) (*connect.Response[accounts.Accounts], error)) *MockAccountsServiceClient_List_Call {
	_c.Call.Return(run)
	return _c
}

// Move provides a mock function with given fields: _a0, _a1
func (_m *MockAccountsServiceClient) Move(_a0 context.Context, _a1 *connect.Request[node.MoveRequest]) (*connect.Response[node.EmptyMessage], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Move")
	}

	var r0 *connect.Response[node.EmptyMessage]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[node.MoveRequest]) (*connect.Response[node.EmptyMessage], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[node.MoveRequest]) *connect.Response[node.EmptyMessage]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[node.EmptyMessage])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[node.MoveRequest]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountsServiceClient_Move_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Move'
type MockAccountsServiceClient_Move_Call struct {
	*mock.Call
}

// Move is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *connect.Request[node.MoveRequest]
func (_e *MockAccountsServiceClient_Expecter) Move(_a0 interface{}, _a1 interface{}) *MockAccountsServiceClient_Move_Call {
	return &MockAccountsServiceClient_Move_Call{Call: _e.mock.On("Move", _a0, _a1)}
}

func (_c *MockAccountsServiceClient_Move_Call) Run(run func(_a0 context.Context, _a1 *connect.Request[node.MoveRequest])) *MockAccountsServiceClient_Move_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connect.Request[node.MoveRequest]))
	})
	return _c
}

func (_c *MockAccountsServiceClient_Move_Call) Return(_a0 *connect.Response[node.EmptyMessage], _a1 error) *MockAccountsServiceClient_Move_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountsServiceClient_Move_Call) RunAndReturn(run func(context.Context, *connect.Request[node.MoveRequest]) (*connect.Response[node.EmptyMessage], error)) *MockAccountsServiceClient_Move_Call {
	_c.Call.Return(run)
	return _c
}

// SetCredentials provides a mock function with given fields: _a0, _a1
func (_m *MockAccountsServiceClient) SetCredentials(_a0 context.Context, _a1 *connect.Request[node.SetCredentialsRequest]) (*connect.Response[node.SetCredentialsResponse], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for SetCredentials")
	}

	var r0 *connect.Response[node.SetCredentialsResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[node.SetCredentialsRequest]) (*connect.Response[node.SetCredentialsResponse], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[node.SetCredentialsRequest]) *connect.Response[node.SetCredentialsResponse]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[node.SetCredentialsResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[node.SetCredentialsRequest]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountsServiceClient_SetCredentials_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetCredentials'
type MockAccountsServiceClient_SetCredentials_Call struct {
	*mock.Call
}

// SetCredentials is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *connect.Request[node.SetCredentialsRequest]
func (_e *MockAccountsServiceClient_Expecter) SetCredentials(_a0 interface{}, _a1 interface{}) *MockAccountsServiceClient_SetCredentials_Call {
	return &MockAccountsServiceClient_SetCredentials_Call{Call: _e.mock.On("SetCredentials", _a0, _a1)}
}

func (_c *MockAccountsServiceClient_SetCredentials_Call) Run(run func(_a0 context.Context, _a1 *connect.Request[node.SetCredentialsRequest])) *MockAccountsServiceClient_SetCredentials_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connect.Request[node.SetCredentialsRequest]))
	})
	return _c
}

func (_c *MockAccountsServiceClient_SetCredentials_Call) Return(_a0 *connect.Response[node.SetCredentialsResponse], _a1 error) *MockAccountsServiceClient_SetCredentials_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountsServiceClient_SetCredentials_Call) RunAndReturn(run func(context.Context, *connect.Request[node.SetCredentialsRequest]) (*connect.Response[node.SetCredentialsResponse], error)) *MockAccountsServiceClient_SetCredentials_Call {
	_c.Call.Return(run)
	return _c
}

// Toggle provides a mock function with given fields: _a0, _a1
func (_m *MockAccountsServiceClient) Toggle(_a0 context.Context, _a1 *connect.Request[accounts.Account]) (*connect.Response[accounts.Account], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Toggle")
	}

	var r0 *connect.Response[accounts.Account]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[accounts.Account]) (*connect.Response[accounts.Account], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[accounts.Account]) *connect.Response[accounts.Account]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[accounts.Account])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[accounts.Account]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountsServiceClient_Toggle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Toggle'
type MockAccountsServiceClient_Toggle_Call struct {
	*mock.Call
}

// Toggle is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *connect.Request[accounts.Account]
func (_e *MockAccountsServiceClient_Expecter) Toggle(_a0 interface{}, _a1 interface{}) *MockAccountsServiceClient_Toggle_Call {
	return &MockAccountsServiceClient_Toggle_Call{Call: _e.mock.On("Toggle", _a0, _a1)}
}

func (_c *MockAccountsServiceClient_Toggle_Call) Run(run func(_a0 context.Context, _a1 *connect.Request[accounts.Account])) *MockAccountsServiceClient_Toggle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connect.Request[accounts.Account]))
	})
	return _c
}

func (_c *MockAccountsServiceClient_Toggle_Call) Return(_a0 *connect.Response[accounts.Account], _a1 error) *MockAccountsServiceClient_Toggle_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountsServiceClient_Toggle_Call) RunAndReturn(run func(context.Context, *connect.Request[accounts.Account]) (*connect.Response[accounts.Account], error)) *MockAccountsServiceClient_Toggle_Call {
	_c.Call.Return(run)
	return _c
}

// Token provides a mock function with given fields: _a0, _a1
func (_m *MockAccountsServiceClient) Token(_a0 context.Context, _a1 *connect.Request[node.TokenRequest]) (*connect.Response[node.TokenResponse], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Token")
	}

	var r0 *connect.Response[node.TokenResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[node.TokenRequest]) (*connect.Response[node.TokenResponse], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[node.TokenRequest]) *connect.Response[node.TokenResponse]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[node.TokenResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[node.TokenRequest]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountsServiceClient_Token_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Token'
type MockAccountsServiceClient_Token_Call struct {
	*mock.Call
}

// Token is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *connect.Request[node.TokenRequest]
func (_e *MockAccountsServiceClient_Expecter) Token(_a0 interface{}, _a1 interface{}) *MockAccountsServiceClient_Token_Call {
	return &MockAccountsServiceClient_Token_Call{Call: _e.mock.On("Token", _a0, _a1)}
}

func (_c *MockAccountsServiceClient_Token_Call) Run(run func(_a0 context.Context, _a1 *connect.Request[node.TokenRequest])) *MockAccountsServiceClient_Token_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connect.Request[node.TokenRequest]))
	})
	return _c
}

func (_c *MockAccountsServiceClient_Token_Call) Return(_a0 *connect.Response[node.TokenResponse], _a1 error) *MockAccountsServiceClient_Token_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountsServiceClient_Token_Call) RunAndReturn(run func(context.Context, *connect.Request[node.TokenRequest]) (*connect.Response[node.TokenResponse], error)) *MockAccountsServiceClient_Token_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: _a0, _a1
func (_m *MockAccountsServiceClient) Update(_a0 context.Context, _a1 *connect.Request[accounts.Account]) (*connect.Response[accounts.Account], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *connect.Response[accounts.Account]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[accounts.Account]) (*connect.Response[accounts.Account], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[accounts.Account]) *connect.Response[accounts.Account]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[accounts.Account])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[accounts.Account]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountsServiceClient_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockAccountsServiceClient_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *connect.Request[accounts.Account]
func (_e *MockAccountsServiceClient_Expecter) Update(_a0 interface{}, _a1 interface{}) *MockAccountsServiceClient_Update_Call {
	return &MockAccountsServiceClient_Update_Call{Call: _e.mock.On("Update", _a0, _a1)}
}

func (_c *MockAccountsServiceClient_Update_Call) Run(run func(_a0 context.Context, _a1 *connect.Request[accounts.Account])) *MockAccountsServiceClient_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connect.Request[accounts.Account]))
	})
	return _c
}

func (_c *MockAccountsServiceClient_Update_Call) Return(_a0 *connect.Response[accounts.Account], _a1 error) *MockAccountsServiceClient_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountsServiceClient_Update_Call) RunAndReturn(run func(context.Context, *connect.Request[accounts.Account]) (*connect.Response[accounts.Account], error)) *MockAccountsServiceClient_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAccountsServiceClient creates a new instance of MockAccountsServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAccountsServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAccountsServiceClient {
	mock := &MockAccountsServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
