// Code generated by mockery v2.42.0. DO NOT EDIT.

package nodeconnect_mocks

import (
	access "github.com/infinimesh/proto/node/access"
	accounts "github.com/infinimesh/proto/node/accounts"

	connect "connectrpc.com/connect"

	context "context"

	mock "github.com/stretchr/testify/mock"

	namespaces "github.com/infinimesh/proto/node/namespaces"

	node "github.com/infinimesh/proto/node"
)

// MockNamespacesServiceClient is an autogenerated mock type for the NamespacesServiceClient type
type MockNamespacesServiceClient struct {
	mock.Mock
}

type MockNamespacesServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockNamespacesServiceClient) EXPECT() *MockNamespacesServiceClient_Expecter {
	return &MockNamespacesServiceClient_Expecter{mock: &_m.Mock}
}

// Accessibles provides a mock function with given fields: _a0, _a1
func (_m *MockNamespacesServiceClient) Accessibles(_a0 context.Context, _a1 *connect.Request[namespaces.Namespace]) (*connect.Response[access.Nodes], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Accessibles")
	}

	var r0 *connect.Response[access.Nodes]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[namespaces.Namespace]) (*connect.Response[access.Nodes], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[namespaces.Namespace]) *connect.Response[access.Nodes]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[access.Nodes])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[namespaces.Namespace]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNamespacesServiceClient_Accessibles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Accessibles'
type MockNamespacesServiceClient_Accessibles_Call struct {
	*mock.Call
}

// Accessibles is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *connect.Request[namespaces.Namespace]
func (_e *MockNamespacesServiceClient_Expecter) Accessibles(_a0 interface{}, _a1 interface{}) *MockNamespacesServiceClient_Accessibles_Call {
	return &MockNamespacesServiceClient_Accessibles_Call{Call: _e.mock.On("Accessibles", _a0, _a1)}
}

func (_c *MockNamespacesServiceClient_Accessibles_Call) Run(run func(_a0 context.Context, _a1 *connect.Request[namespaces.Namespace])) *MockNamespacesServiceClient_Accessibles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connect.Request[namespaces.Namespace]))
	})
	return _c
}

func (_c *MockNamespacesServiceClient_Accessibles_Call) Return(_a0 *connect.Response[access.Nodes], _a1 error) *MockNamespacesServiceClient_Accessibles_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNamespacesServiceClient_Accessibles_Call) RunAndReturn(run func(context.Context, *connect.Request[namespaces.Namespace]) (*connect.Response[access.Nodes], error)) *MockNamespacesServiceClient_Accessibles_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: _a0, _a1
func (_m *MockNamespacesServiceClient) Create(_a0 context.Context, _a1 *connect.Request[namespaces.Namespace]) (*connect.Response[namespaces.Namespace], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *connect.Response[namespaces.Namespace]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[namespaces.Namespace]) (*connect.Response[namespaces.Namespace], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[namespaces.Namespace]) *connect.Response[namespaces.Namespace]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[namespaces.Namespace])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[namespaces.Namespace]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNamespacesServiceClient_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockNamespacesServiceClient_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *connect.Request[namespaces.Namespace]
func (_e *MockNamespacesServiceClient_Expecter) Create(_a0 interface{}, _a1 interface{}) *MockNamespacesServiceClient_Create_Call {
	return &MockNamespacesServiceClient_Create_Call{Call: _e.mock.On("Create", _a0, _a1)}
}

func (_c *MockNamespacesServiceClient_Create_Call) Run(run func(_a0 context.Context, _a1 *connect.Request[namespaces.Namespace])) *MockNamespacesServiceClient_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connect.Request[namespaces.Namespace]))
	})
	return _c
}

func (_c *MockNamespacesServiceClient_Create_Call) Return(_a0 *connect.Response[namespaces.Namespace], _a1 error) *MockNamespacesServiceClient_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNamespacesServiceClient_Create_Call) RunAndReturn(run func(context.Context, *connect.Request[namespaces.Namespace]) (*connect.Response[namespaces.Namespace], error)) *MockNamespacesServiceClient_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Deletables provides a mock function with given fields: _a0, _a1
func (_m *MockNamespacesServiceClient) Deletables(_a0 context.Context, _a1 *connect.Request[namespaces.Namespace]) (*connect.Response[access.Nodes], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Deletables")
	}

	var r0 *connect.Response[access.Nodes]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[namespaces.Namespace]) (*connect.Response[access.Nodes], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[namespaces.Namespace]) *connect.Response[access.Nodes]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[access.Nodes])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[namespaces.Namespace]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNamespacesServiceClient_Deletables_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Deletables'
type MockNamespacesServiceClient_Deletables_Call struct {
	*mock.Call
}

// Deletables is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *connect.Request[namespaces.Namespace]
func (_e *MockNamespacesServiceClient_Expecter) Deletables(_a0 interface{}, _a1 interface{}) *MockNamespacesServiceClient_Deletables_Call {
	return &MockNamespacesServiceClient_Deletables_Call{Call: _e.mock.On("Deletables", _a0, _a1)}
}

func (_c *MockNamespacesServiceClient_Deletables_Call) Run(run func(_a0 context.Context, _a1 *connect.Request[namespaces.Namespace])) *MockNamespacesServiceClient_Deletables_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connect.Request[namespaces.Namespace]))
	})
	return _c
}

func (_c *MockNamespacesServiceClient_Deletables_Call) Return(_a0 *connect.Response[access.Nodes], _a1 error) *MockNamespacesServiceClient_Deletables_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNamespacesServiceClient_Deletables_Call) RunAndReturn(run func(context.Context, *connect.Request[namespaces.Namespace]) (*connect.Response[access.Nodes], error)) *MockNamespacesServiceClient_Deletables_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: _a0, _a1
func (_m *MockNamespacesServiceClient) Delete(_a0 context.Context, _a1 *connect.Request[namespaces.Namespace]) (*connect.Response[node.DeleteResponse], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 *connect.Response[node.DeleteResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[namespaces.Namespace]) (*connect.Response[node.DeleteResponse], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[namespaces.Namespace]) *connect.Response[node.DeleteResponse]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[node.DeleteResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[namespaces.Namespace]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNamespacesServiceClient_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockNamespacesServiceClient_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *connect.Request[namespaces.Namespace]
func (_e *MockNamespacesServiceClient_Expecter) Delete(_a0 interface{}, _a1 interface{}) *MockNamespacesServiceClient_Delete_Call {
	return &MockNamespacesServiceClient_Delete_Call{Call: _e.mock.On("Delete", _a0, _a1)}
}

func (_c *MockNamespacesServiceClient_Delete_Call) Run(run func(_a0 context.Context, _a1 *connect.Request[namespaces.Namespace])) *MockNamespacesServiceClient_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connect.Request[namespaces.Namespace]))
	})
	return _c
}

func (_c *MockNamespacesServiceClient_Delete_Call) Return(_a0 *connect.Response[node.DeleteResponse], _a1 error) *MockNamespacesServiceClient_Delete_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNamespacesServiceClient_Delete_Call) RunAndReturn(run func(context.Context, *connect.Request[namespaces.Namespace]) (*connect.Response[node.DeleteResponse], error)) *MockNamespacesServiceClient_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: _a0, _a1
func (_m *MockNamespacesServiceClient) Get(_a0 context.Context, _a1 *connect.Request[namespaces.Namespace]) (*connect.Response[namespaces.Namespace], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *connect.Response[namespaces.Namespace]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[namespaces.Namespace]) (*connect.Response[namespaces.Namespace], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[namespaces.Namespace]) *connect.Response[namespaces.Namespace]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[namespaces.Namespace])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[namespaces.Namespace]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNamespacesServiceClient_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockNamespacesServiceClient_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *connect.Request[namespaces.Namespace]
func (_e *MockNamespacesServiceClient_Expecter) Get(_a0 interface{}, _a1 interface{}) *MockNamespacesServiceClient_Get_Call {
	return &MockNamespacesServiceClient_Get_Call{Call: _e.mock.On("Get", _a0, _a1)}
}

func (_c *MockNamespacesServiceClient_Get_Call) Run(run func(_a0 context.Context, _a1 *connect.Request[namespaces.Namespace])) *MockNamespacesServiceClient_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connect.Request[namespaces.Namespace]))
	})
	return _c
}

func (_c *MockNamespacesServiceClient_Get_Call) Return(_a0 *connect.Response[namespaces.Namespace], _a1 error) *MockNamespacesServiceClient_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNamespacesServiceClient_Get_Call) RunAndReturn(run func(context.Context, *connect.Request[namespaces.Namespace]) (*connect.Response[namespaces.Namespace], error)) *MockNamespacesServiceClient_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Join provides a mock function with given fields: _a0, _a1
func (_m *MockNamespacesServiceClient) Join(_a0 context.Context, _a1 *connect.Request[node.JoinRequest]) (*connect.Response[accounts.Accounts], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Join")
	}

	var r0 *connect.Response[accounts.Accounts]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[node.JoinRequest]) (*connect.Response[accounts.Accounts], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[node.JoinRequest]) *connect.Response[accounts.Accounts]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[accounts.Accounts])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[node.JoinRequest]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNamespacesServiceClient_Join_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Join'
type MockNamespacesServiceClient_Join_Call struct {
	*mock.Call
}

// Join is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *connect.Request[node.JoinRequest]
func (_e *MockNamespacesServiceClient_Expecter) Join(_a0 interface{}, _a1 interface{}) *MockNamespacesServiceClient_Join_Call {
	return &MockNamespacesServiceClient_Join_Call{Call: _e.mock.On("Join", _a0, _a1)}
}

func (_c *MockNamespacesServiceClient_Join_Call) Run(run func(_a0 context.Context, _a1 *connect.Request[node.JoinRequest])) *MockNamespacesServiceClient_Join_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connect.Request[node.JoinRequest]))
	})
	return _c
}

func (_c *MockNamespacesServiceClient_Join_Call) Return(_a0 *connect.Response[accounts.Accounts], _a1 error) *MockNamespacesServiceClient_Join_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNamespacesServiceClient_Join_Call) RunAndReturn(run func(context.Context, *connect.Request[node.JoinRequest]) (*connect.Response[accounts.Accounts], error)) *MockNamespacesServiceClient_Join_Call {
	_c.Call.Return(run)
	return _c
}

// Joins provides a mock function with given fields: _a0, _a1
func (_m *MockNamespacesServiceClient) Joins(_a0 context.Context, _a1 *connect.Request[namespaces.Namespace]) (*connect.Response[accounts.Accounts], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Joins")
	}

	var r0 *connect.Response[accounts.Accounts]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[namespaces.Namespace]) (*connect.Response[accounts.Accounts], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[namespaces.Namespace]) *connect.Response[accounts.Accounts]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[accounts.Accounts])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[namespaces.Namespace]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNamespacesServiceClient_Joins_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Joins'
type MockNamespacesServiceClient_Joins_Call struct {
	*mock.Call
}

// Joins is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *connect.Request[namespaces.Namespace]
func (_e *MockNamespacesServiceClient_Expecter) Joins(_a0 interface{}, _a1 interface{}) *MockNamespacesServiceClient_Joins_Call {
	return &MockNamespacesServiceClient_Joins_Call{Call: _e.mock.On("Joins", _a0, _a1)}
}

func (_c *MockNamespacesServiceClient_Joins_Call) Run(run func(_a0 context.Context, _a1 *connect.Request[namespaces.Namespace])) *MockNamespacesServiceClient_Joins_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connect.Request[namespaces.Namespace]))
	})
	return _c
}

func (_c *MockNamespacesServiceClient_Joins_Call) Return(_a0 *connect.Response[accounts.Accounts], _a1 error) *MockNamespacesServiceClient_Joins_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNamespacesServiceClient_Joins_Call) RunAndReturn(run func(context.Context, *connect.Request[namespaces.Namespace]) (*connect.Response[accounts.Accounts], error)) *MockNamespacesServiceClient_Joins_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: _a0, _a1
func (_m *MockNamespacesServiceClient) List(_a0 context.Context, _a1 *connect.Request[node.EmptyMessage]) (*connect.Response[namespaces.Namespaces], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 *connect.Response[namespaces.Namespaces]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[node.EmptyMessage]) (*connect.Response[namespaces.Namespaces], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[node.EmptyMessage]) *connect.Response[namespaces.Namespaces]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[namespaces.Namespaces])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[node.EmptyMessage]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNamespacesServiceClient_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockNamespacesServiceClient_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *connect.Request[node.EmptyMessage]
func (_e *MockNamespacesServiceClient_Expecter) List(_a0 interface{}, _a1 interface{}) *MockNamespacesServiceClient_List_Call {
	return &MockNamespacesServiceClient_List_Call{Call: _e.mock.On("List", _a0, _a1)}
}

func (_c *MockNamespacesServiceClient_List_Call) Run(run func(_a0 context.Context, _a1 *connect.Request[node.EmptyMessage])) *MockNamespacesServiceClient_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connect.Request[node.EmptyMessage]))
	})
	return _c
}

func (_c *MockNamespacesServiceClient_List_Call) Return(_a0 *connect.Response[namespaces.Namespaces], _a1 error) *MockNamespacesServiceClient_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNamespacesServiceClient_List_Call) RunAndReturn(run func(context.Context, *connect.Request[node.EmptyMessage]) (*connect.Response[namespaces.Namespaces], error)) *MockNamespacesServiceClient_List_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: _a0, _a1
func (_m *MockNamespacesServiceClient) Update(_a0 context.Context, _a1 *connect.Request[namespaces.Namespace]) (*connect.Response[namespaces.Namespace], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *connect.Response[namespaces.Namespace]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[namespaces.Namespace]) (*connect.Response[namespaces.Namespace], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[namespaces.Namespace]) *connect.Response[namespaces.Namespace]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[namespaces.Namespace])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[namespaces.Namespace]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNamespacesServiceClient_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockNamespacesServiceClient_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *connect.Request[namespaces.Namespace]
func (_e *MockNamespacesServiceClient_Expecter) Update(_a0 interface{}, _a1 interface{}) *MockNamespacesServiceClient_Update_Call {
	return &MockNamespacesServiceClient_Update_Call{Call: _e.mock.On("Update", _a0, _a1)}
}

func (_c *MockNamespacesServiceClient_Update_Call) Run(run func(_a0 context.Context, _a1 *connect.Request[namespaces.Namespace])) *MockNamespacesServiceClient_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connect.Request[namespaces.Namespace]))
	})
	return _c
}

func (_c *MockNamespacesServiceClient_Update_Call) Return(_a0 *connect.Response[namespaces.Namespace], _a1 error) *MockNamespacesServiceClient_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNamespacesServiceClient_Update_Call) RunAndReturn(run func(context.Context, *connect.Request[namespaces.Namespace]) (*connect.Response[namespaces.Namespace], error)) *MockNamespacesServiceClient_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockNamespacesServiceClient creates a new instance of MockNamespacesServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockNamespacesServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockNamespacesServiceClient {
	mock := &MockNamespacesServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
