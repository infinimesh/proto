// Code generated by mockery v2.42.0. DO NOT EDIT.

package nodeconnect_mocks

import (
	connect "connectrpc.com/connect"
	access "github.com/infinimesh/proto/node/access"

	context "context"

	devices "github.com/infinimesh/proto/node/devices"

	mock "github.com/stretchr/testify/mock"

	node "github.com/infinimesh/proto/node"
)

// MockDevicesServiceClient is an autogenerated mock type for the DevicesServiceClient type
type MockDevicesServiceClient struct {
	mock.Mock
}

type MockDevicesServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDevicesServiceClient) EXPECT() *MockDevicesServiceClient_Expecter {
	return &MockDevicesServiceClient_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: _a0, _a1
func (_m *MockDevicesServiceClient) Create(_a0 context.Context, _a1 *connect.Request[devices.CreateRequest]) (*connect.Response[devices.CreateResponse], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *connect.Response[devices.CreateResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[devices.CreateRequest]) (*connect.Response[devices.CreateResponse], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[devices.CreateRequest]) *connect.Response[devices.CreateResponse]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[devices.CreateResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[devices.CreateRequest]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDevicesServiceClient_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockDevicesServiceClient_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *connect.Request[devices.CreateRequest]
func (_e *MockDevicesServiceClient_Expecter) Create(_a0 interface{}, _a1 interface{}) *MockDevicesServiceClient_Create_Call {
	return &MockDevicesServiceClient_Create_Call{Call: _e.mock.On("Create", _a0, _a1)}
}

func (_c *MockDevicesServiceClient_Create_Call) Run(run func(_a0 context.Context, _a1 *connect.Request[devices.CreateRequest])) *MockDevicesServiceClient_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connect.Request[devices.CreateRequest]))
	})
	return _c
}

func (_c *MockDevicesServiceClient_Create_Call) Return(_a0 *connect.Response[devices.CreateResponse], _a1 error) *MockDevicesServiceClient_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDevicesServiceClient_Create_Call) RunAndReturn(run func(context.Context, *connect.Request[devices.CreateRequest]) (*connect.Response[devices.CreateResponse], error)) *MockDevicesServiceClient_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: _a0, _a1
func (_m *MockDevicesServiceClient) Delete(_a0 context.Context, _a1 *connect.Request[devices.Device]) (*connect.Response[node.DeleteResponse], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 *connect.Response[node.DeleteResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[devices.Device]) (*connect.Response[node.DeleteResponse], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[devices.Device]) *connect.Response[node.DeleteResponse]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[node.DeleteResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[devices.Device]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDevicesServiceClient_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockDevicesServiceClient_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *connect.Request[devices.Device]
func (_e *MockDevicesServiceClient_Expecter) Delete(_a0 interface{}, _a1 interface{}) *MockDevicesServiceClient_Delete_Call {
	return &MockDevicesServiceClient_Delete_Call{Call: _e.mock.On("Delete", _a0, _a1)}
}

func (_c *MockDevicesServiceClient_Delete_Call) Run(run func(_a0 context.Context, _a1 *connect.Request[devices.Device])) *MockDevicesServiceClient_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connect.Request[devices.Device]))
	})
	return _c
}

func (_c *MockDevicesServiceClient_Delete_Call) Return(_a0 *connect.Response[node.DeleteResponse], _a1 error) *MockDevicesServiceClient_Delete_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDevicesServiceClient_Delete_Call) RunAndReturn(run func(context.Context, *connect.Request[devices.Device]) (*connect.Response[node.DeleteResponse], error)) *MockDevicesServiceClient_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: _a0, _a1
func (_m *MockDevicesServiceClient) Get(_a0 context.Context, _a1 *connect.Request[devices.Device]) (*connect.Response[devices.Device], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *connect.Response[devices.Device]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[devices.Device]) (*connect.Response[devices.Device], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[devices.Device]) *connect.Response[devices.Device]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[devices.Device])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[devices.Device]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDevicesServiceClient_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockDevicesServiceClient_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *connect.Request[devices.Device]
func (_e *MockDevicesServiceClient_Expecter) Get(_a0 interface{}, _a1 interface{}) *MockDevicesServiceClient_Get_Call {
	return &MockDevicesServiceClient_Get_Call{Call: _e.mock.On("Get", _a0, _a1)}
}

func (_c *MockDevicesServiceClient_Get_Call) Run(run func(_a0 context.Context, _a1 *connect.Request[devices.Device])) *MockDevicesServiceClient_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connect.Request[devices.Device]))
	})
	return _c
}

func (_c *MockDevicesServiceClient_Get_Call) Return(_a0 *connect.Response[devices.Device], _a1 error) *MockDevicesServiceClient_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDevicesServiceClient_Get_Call) RunAndReturn(run func(context.Context, *connect.Request[devices.Device]) (*connect.Response[devices.Device], error)) *MockDevicesServiceClient_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetByFingerprint provides a mock function with given fields: _a0, _a1
func (_m *MockDevicesServiceClient) GetByFingerprint(_a0 context.Context, _a1 *connect.Request[devices.GetByFingerprintRequest]) (*connect.Response[devices.Device], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetByFingerprint")
	}

	var r0 *connect.Response[devices.Device]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[devices.GetByFingerprintRequest]) (*connect.Response[devices.Device], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[devices.GetByFingerprintRequest]) *connect.Response[devices.Device]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[devices.Device])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[devices.GetByFingerprintRequest]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDevicesServiceClient_GetByFingerprint_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByFingerprint'
type MockDevicesServiceClient_GetByFingerprint_Call struct {
	*mock.Call
}

// GetByFingerprint is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *connect.Request[devices.GetByFingerprintRequest]
func (_e *MockDevicesServiceClient_Expecter) GetByFingerprint(_a0 interface{}, _a1 interface{}) *MockDevicesServiceClient_GetByFingerprint_Call {
	return &MockDevicesServiceClient_GetByFingerprint_Call{Call: _e.mock.On("GetByFingerprint", _a0, _a1)}
}

func (_c *MockDevicesServiceClient_GetByFingerprint_Call) Run(run func(_a0 context.Context, _a1 *connect.Request[devices.GetByFingerprintRequest])) *MockDevicesServiceClient_GetByFingerprint_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connect.Request[devices.GetByFingerprintRequest]))
	})
	return _c
}

func (_c *MockDevicesServiceClient_GetByFingerprint_Call) Return(_a0 *connect.Response[devices.Device], _a1 error) *MockDevicesServiceClient_GetByFingerprint_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDevicesServiceClient_GetByFingerprint_Call) RunAndReturn(run func(context.Context, *connect.Request[devices.GetByFingerprintRequest]) (*connect.Response[devices.Device], error)) *MockDevicesServiceClient_GetByFingerprint_Call {
	_c.Call.Return(run)
	return _c
}

// GetByToken provides a mock function with given fields: _a0, _a1
func (_m *MockDevicesServiceClient) GetByToken(_a0 context.Context, _a1 *connect.Request[devices.Device]) (*connect.Response[devices.Device], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetByToken")
	}

	var r0 *connect.Response[devices.Device]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[devices.Device]) (*connect.Response[devices.Device], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[devices.Device]) *connect.Response[devices.Device]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[devices.Device])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[devices.Device]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDevicesServiceClient_GetByToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByToken'
type MockDevicesServiceClient_GetByToken_Call struct {
	*mock.Call
}

// GetByToken is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *connect.Request[devices.Device]
func (_e *MockDevicesServiceClient_Expecter) GetByToken(_a0 interface{}, _a1 interface{}) *MockDevicesServiceClient_GetByToken_Call {
	return &MockDevicesServiceClient_GetByToken_Call{Call: _e.mock.On("GetByToken", _a0, _a1)}
}

func (_c *MockDevicesServiceClient_GetByToken_Call) Run(run func(_a0 context.Context, _a1 *connect.Request[devices.Device])) *MockDevicesServiceClient_GetByToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connect.Request[devices.Device]))
	})
	return _c
}

func (_c *MockDevicesServiceClient_GetByToken_Call) Return(_a0 *connect.Response[devices.Device], _a1 error) *MockDevicesServiceClient_GetByToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDevicesServiceClient_GetByToken_Call) RunAndReturn(run func(context.Context, *connect.Request[devices.Device]) (*connect.Response[devices.Device], error)) *MockDevicesServiceClient_GetByToken_Call {
	_c.Call.Return(run)
	return _c
}

// Join provides a mock function with given fields: _a0, _a1
func (_m *MockDevicesServiceClient) Join(_a0 context.Context, _a1 *connect.Request[node.JoinGeneralRequest]) (*connect.Response[access.Node], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Join")
	}

	var r0 *connect.Response[access.Node]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[node.JoinGeneralRequest]) (*connect.Response[access.Node], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[node.JoinGeneralRequest]) *connect.Response[access.Node]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[access.Node])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[node.JoinGeneralRequest]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDevicesServiceClient_Join_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Join'
type MockDevicesServiceClient_Join_Call struct {
	*mock.Call
}

// Join is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *connect.Request[node.JoinGeneralRequest]
func (_e *MockDevicesServiceClient_Expecter) Join(_a0 interface{}, _a1 interface{}) *MockDevicesServiceClient_Join_Call {
	return &MockDevicesServiceClient_Join_Call{Call: _e.mock.On("Join", _a0, _a1)}
}

func (_c *MockDevicesServiceClient_Join_Call) Run(run func(_a0 context.Context, _a1 *connect.Request[node.JoinGeneralRequest])) *MockDevicesServiceClient_Join_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connect.Request[node.JoinGeneralRequest]))
	})
	return _c
}

func (_c *MockDevicesServiceClient_Join_Call) Return(_a0 *connect.Response[access.Node], _a1 error) *MockDevicesServiceClient_Join_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDevicesServiceClient_Join_Call) RunAndReturn(run func(context.Context, *connect.Request[node.JoinGeneralRequest]) (*connect.Response[access.Node], error)) *MockDevicesServiceClient_Join_Call {
	_c.Call.Return(run)
	return _c
}

// Joins provides a mock function with given fields: _a0, _a1
func (_m *MockDevicesServiceClient) Joins(_a0 context.Context, _a1 *connect.Request[devices.Device]) (*connect.Response[access.Nodes], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Joins")
	}

	var r0 *connect.Response[access.Nodes]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[devices.Device]) (*connect.Response[access.Nodes], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[devices.Device]) *connect.Response[access.Nodes]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[access.Nodes])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[devices.Device]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDevicesServiceClient_Joins_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Joins'
type MockDevicesServiceClient_Joins_Call struct {
	*mock.Call
}

// Joins is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *connect.Request[devices.Device]
func (_e *MockDevicesServiceClient_Expecter) Joins(_a0 interface{}, _a1 interface{}) *MockDevicesServiceClient_Joins_Call {
	return &MockDevicesServiceClient_Joins_Call{Call: _e.mock.On("Joins", _a0, _a1)}
}

func (_c *MockDevicesServiceClient_Joins_Call) Run(run func(_a0 context.Context, _a1 *connect.Request[devices.Device])) *MockDevicesServiceClient_Joins_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connect.Request[devices.Device]))
	})
	return _c
}

func (_c *MockDevicesServiceClient_Joins_Call) Return(_a0 *connect.Response[access.Nodes], _a1 error) *MockDevicesServiceClient_Joins_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDevicesServiceClient_Joins_Call) RunAndReturn(run func(context.Context, *connect.Request[devices.Device]) (*connect.Response[access.Nodes], error)) *MockDevicesServiceClient_Joins_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: _a0, _a1
func (_m *MockDevicesServiceClient) List(_a0 context.Context, _a1 *connect.Request[node.QueryRequest]) (*connect.Response[devices.Devices], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 *connect.Response[devices.Devices]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[node.QueryRequest]) (*connect.Response[devices.Devices], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[node.QueryRequest]) *connect.Response[devices.Devices]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[devices.Devices])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[node.QueryRequest]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDevicesServiceClient_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockDevicesServiceClient_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *connect.Request[node.QueryRequest]
func (_e *MockDevicesServiceClient_Expecter) List(_a0 interface{}, _a1 interface{}) *MockDevicesServiceClient_List_Call {
	return &MockDevicesServiceClient_List_Call{Call: _e.mock.On("List", _a0, _a1)}
}

func (_c *MockDevicesServiceClient_List_Call) Run(run func(_a0 context.Context, _a1 *connect.Request[node.QueryRequest])) *MockDevicesServiceClient_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connect.Request[node.QueryRequest]))
	})
	return _c
}

func (_c *MockDevicesServiceClient_List_Call) Return(_a0 *connect.Response[devices.Devices], _a1 error) *MockDevicesServiceClient_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDevicesServiceClient_List_Call) RunAndReturn(run func(context.Context, *connect.Request[node.QueryRequest]) (*connect.Response[devices.Devices], error)) *MockDevicesServiceClient_List_Call {
	_c.Call.Return(run)
	return _c
}

// MakeDevicesToken provides a mock function with given fields: _a0, _a1
func (_m *MockDevicesServiceClient) MakeDevicesToken(_a0 context.Context, _a1 *connect.Request[node.DevicesTokenRequest]) (*connect.Response[node.TokenResponse], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for MakeDevicesToken")
	}

	var r0 *connect.Response[node.TokenResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[node.DevicesTokenRequest]) (*connect.Response[node.TokenResponse], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[node.DevicesTokenRequest]) *connect.Response[node.TokenResponse]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[node.TokenResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[node.DevicesTokenRequest]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDevicesServiceClient_MakeDevicesToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MakeDevicesToken'
type MockDevicesServiceClient_MakeDevicesToken_Call struct {
	*mock.Call
}

// MakeDevicesToken is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *connect.Request[node.DevicesTokenRequest]
func (_e *MockDevicesServiceClient_Expecter) MakeDevicesToken(_a0 interface{}, _a1 interface{}) *MockDevicesServiceClient_MakeDevicesToken_Call {
	return &MockDevicesServiceClient_MakeDevicesToken_Call{Call: _e.mock.On("MakeDevicesToken", _a0, _a1)}
}

func (_c *MockDevicesServiceClient_MakeDevicesToken_Call) Run(run func(_a0 context.Context, _a1 *connect.Request[node.DevicesTokenRequest])) *MockDevicesServiceClient_MakeDevicesToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connect.Request[node.DevicesTokenRequest]))
	})
	return _c
}

func (_c *MockDevicesServiceClient_MakeDevicesToken_Call) Return(_a0 *connect.Response[node.TokenResponse], _a1 error) *MockDevicesServiceClient_MakeDevicesToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDevicesServiceClient_MakeDevicesToken_Call) RunAndReturn(run func(context.Context, *connect.Request[node.DevicesTokenRequest]) (*connect.Response[node.TokenResponse], error)) *MockDevicesServiceClient_MakeDevicesToken_Call {
	_c.Call.Return(run)
	return _c
}

// Move provides a mock function with given fields: _a0, _a1
func (_m *MockDevicesServiceClient) Move(_a0 context.Context, _a1 *connect.Request[node.MoveRequest]) (*connect.Response[node.EmptyMessage], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Move")
	}

	var r0 *connect.Response[node.EmptyMessage]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[node.MoveRequest]) (*connect.Response[node.EmptyMessage], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[node.MoveRequest]) *connect.Response[node.EmptyMessage]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[node.EmptyMessage])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[node.MoveRequest]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDevicesServiceClient_Move_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Move'
type MockDevicesServiceClient_Move_Call struct {
	*mock.Call
}

// Move is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *connect.Request[node.MoveRequest]
func (_e *MockDevicesServiceClient_Expecter) Move(_a0 interface{}, _a1 interface{}) *MockDevicesServiceClient_Move_Call {
	return &MockDevicesServiceClient_Move_Call{Call: _e.mock.On("Move", _a0, _a1)}
}

func (_c *MockDevicesServiceClient_Move_Call) Run(run func(_a0 context.Context, _a1 *connect.Request[node.MoveRequest])) *MockDevicesServiceClient_Move_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connect.Request[node.MoveRequest]))
	})
	return _c
}

func (_c *MockDevicesServiceClient_Move_Call) Return(_a0 *connect.Response[node.EmptyMessage], _a1 error) *MockDevicesServiceClient_Move_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDevicesServiceClient_Move_Call) RunAndReturn(run func(context.Context, *connect.Request[node.MoveRequest]) (*connect.Response[node.EmptyMessage], error)) *MockDevicesServiceClient_Move_Call {
	_c.Call.Return(run)
	return _c
}

// PatchConfig provides a mock function with given fields: _a0, _a1
func (_m *MockDevicesServiceClient) PatchConfig(_a0 context.Context, _a1 *connect.Request[devices.Device]) (*connect.Response[devices.Device], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for PatchConfig")
	}

	var r0 *connect.Response[devices.Device]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[devices.Device]) (*connect.Response[devices.Device], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[devices.Device]) *connect.Response[devices.Device]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[devices.Device])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[devices.Device]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDevicesServiceClient_PatchConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PatchConfig'
type MockDevicesServiceClient_PatchConfig_Call struct {
	*mock.Call
}

// PatchConfig is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *connect.Request[devices.Device]
func (_e *MockDevicesServiceClient_Expecter) PatchConfig(_a0 interface{}, _a1 interface{}) *MockDevicesServiceClient_PatchConfig_Call {
	return &MockDevicesServiceClient_PatchConfig_Call{Call: _e.mock.On("PatchConfig", _a0, _a1)}
}

func (_c *MockDevicesServiceClient_PatchConfig_Call) Run(run func(_a0 context.Context, _a1 *connect.Request[devices.Device])) *MockDevicesServiceClient_PatchConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connect.Request[devices.Device]))
	})
	return _c
}

func (_c *MockDevicesServiceClient_PatchConfig_Call) Return(_a0 *connect.Response[devices.Device], _a1 error) *MockDevicesServiceClient_PatchConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDevicesServiceClient_PatchConfig_Call) RunAndReturn(run func(context.Context, *connect.Request[devices.Device]) (*connect.Response[devices.Device], error)) *MockDevicesServiceClient_PatchConfig_Call {
	_c.Call.Return(run)
	return _c
}

// Toggle provides a mock function with given fields: _a0, _a1
func (_m *MockDevicesServiceClient) Toggle(_a0 context.Context, _a1 *connect.Request[devices.Device]) (*connect.Response[devices.Device], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Toggle")
	}

	var r0 *connect.Response[devices.Device]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[devices.Device]) (*connect.Response[devices.Device], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[devices.Device]) *connect.Response[devices.Device]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[devices.Device])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[devices.Device]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDevicesServiceClient_Toggle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Toggle'
type MockDevicesServiceClient_Toggle_Call struct {
	*mock.Call
}

// Toggle is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *connect.Request[devices.Device]
func (_e *MockDevicesServiceClient_Expecter) Toggle(_a0 interface{}, _a1 interface{}) *MockDevicesServiceClient_Toggle_Call {
	return &MockDevicesServiceClient_Toggle_Call{Call: _e.mock.On("Toggle", _a0, _a1)}
}

func (_c *MockDevicesServiceClient_Toggle_Call) Run(run func(_a0 context.Context, _a1 *connect.Request[devices.Device])) *MockDevicesServiceClient_Toggle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connect.Request[devices.Device]))
	})
	return _c
}

func (_c *MockDevicesServiceClient_Toggle_Call) Return(_a0 *connect.Response[devices.Device], _a1 error) *MockDevicesServiceClient_Toggle_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDevicesServiceClient_Toggle_Call) RunAndReturn(run func(context.Context, *connect.Request[devices.Device]) (*connect.Response[devices.Device], error)) *MockDevicesServiceClient_Toggle_Call {
	_c.Call.Return(run)
	return _c
}

// ToggleBasic provides a mock function with given fields: _a0, _a1
func (_m *MockDevicesServiceClient) ToggleBasic(_a0 context.Context, _a1 *connect.Request[devices.Device]) (*connect.Response[devices.Device], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ToggleBasic")
	}

	var r0 *connect.Response[devices.Device]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[devices.Device]) (*connect.Response[devices.Device], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[devices.Device]) *connect.Response[devices.Device]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[devices.Device])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[devices.Device]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDevicesServiceClient_ToggleBasic_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ToggleBasic'
type MockDevicesServiceClient_ToggleBasic_Call struct {
	*mock.Call
}

// ToggleBasic is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *connect.Request[devices.Device]
func (_e *MockDevicesServiceClient_Expecter) ToggleBasic(_a0 interface{}, _a1 interface{}) *MockDevicesServiceClient_ToggleBasic_Call {
	return &MockDevicesServiceClient_ToggleBasic_Call{Call: _e.mock.On("ToggleBasic", _a0, _a1)}
}

func (_c *MockDevicesServiceClient_ToggleBasic_Call) Run(run func(_a0 context.Context, _a1 *connect.Request[devices.Device])) *MockDevicesServiceClient_ToggleBasic_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connect.Request[devices.Device]))
	})
	return _c
}

func (_c *MockDevicesServiceClient_ToggleBasic_Call) Return(_a0 *connect.Response[devices.Device], _a1 error) *MockDevicesServiceClient_ToggleBasic_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDevicesServiceClient_ToggleBasic_Call) RunAndReturn(run func(context.Context, *connect.Request[devices.Device]) (*connect.Response[devices.Device], error)) *MockDevicesServiceClient_ToggleBasic_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: _a0, _a1
func (_m *MockDevicesServiceClient) Update(_a0 context.Context, _a1 *connect.Request[devices.Device]) (*connect.Response[devices.Device], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *connect.Response[devices.Device]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[devices.Device]) (*connect.Response[devices.Device], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[devices.Device]) *connect.Response[devices.Device]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[devices.Device])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[devices.Device]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDevicesServiceClient_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockDevicesServiceClient_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *connect.Request[devices.Device]
func (_e *MockDevicesServiceClient_Expecter) Update(_a0 interface{}, _a1 interface{}) *MockDevicesServiceClient_Update_Call {
	return &MockDevicesServiceClient_Update_Call{Call: _e.mock.On("Update", _a0, _a1)}
}

func (_c *MockDevicesServiceClient_Update_Call) Run(run func(_a0 context.Context, _a1 *connect.Request[devices.Device])) *MockDevicesServiceClient_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connect.Request[devices.Device]))
	})
	return _c
}

func (_c *MockDevicesServiceClient_Update_Call) Return(_a0 *connect.Response[devices.Device], _a1 error) *MockDevicesServiceClient_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDevicesServiceClient_Update_Call) RunAndReturn(run func(context.Context, *connect.Request[devices.Device]) (*connect.Response[devices.Device], error)) *MockDevicesServiceClient_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDevicesServiceClient creates a new instance of MockDevicesServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDevicesServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDevicesServiceClient {
	mock := &MockDevicesServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
