// Code generated by mockery v2.40.1. DO NOT EDIT.

package nodeconnect_mocks

import (
	context "context"

	connect "connectrpc.com/connect"

	mock "github.com/stretchr/testify/mock"

	node "github.com/infinimesh/proto/node"

	sessions "github.com/infinimesh/proto/node/sessions"
)

// MockSessionsServiceClient is an autogenerated mock type for the SessionsServiceClient type
type MockSessionsServiceClient struct {
	mock.Mock
}

type MockSessionsServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSessionsServiceClient) EXPECT() *MockSessionsServiceClient_Expecter {
	return &MockSessionsServiceClient_Expecter{mock: &_m.Mock}
}

// Get provides a mock function with given fields: _a0, _a1
func (_m *MockSessionsServiceClient) Get(_a0 context.Context, _a1 *connect.Request[node.EmptyMessage]) (*connect.Response[sessions.Sessions], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *connect.Response[sessions.Sessions]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[node.EmptyMessage]) (*connect.Response[sessions.Sessions], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[node.EmptyMessage]) *connect.Response[sessions.Sessions]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[sessions.Sessions])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[node.EmptyMessage]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSessionsServiceClient_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockSessionsServiceClient_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *connect.Request[node.EmptyMessage]
func (_e *MockSessionsServiceClient_Expecter) Get(_a0 interface{}, _a1 interface{}) *MockSessionsServiceClient_Get_Call {
	return &MockSessionsServiceClient_Get_Call{Call: _e.mock.On("Get", _a0, _a1)}
}

func (_c *MockSessionsServiceClient_Get_Call) Run(run func(_a0 context.Context, _a1 *connect.Request[node.EmptyMessage])) *MockSessionsServiceClient_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connect.Request[node.EmptyMessage]))
	})
	return _c
}

func (_c *MockSessionsServiceClient_Get_Call) Return(_a0 *connect.Response[sessions.Sessions], _a1 error) *MockSessionsServiceClient_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSessionsServiceClient_Get_Call) RunAndReturn(run func(context.Context, *connect.Request[node.EmptyMessage]) (*connect.Response[sessions.Sessions], error)) *MockSessionsServiceClient_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetActivity provides a mock function with given fields: _a0, _a1
func (_m *MockSessionsServiceClient) GetActivity(_a0 context.Context, _a1 *connect.Request[node.EmptyMessage]) (*connect.Response[sessions.Activity], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetActivity")
	}

	var r0 *connect.Response[sessions.Activity]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[node.EmptyMessage]) (*connect.Response[sessions.Activity], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[node.EmptyMessage]) *connect.Response[sessions.Activity]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[sessions.Activity])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[node.EmptyMessage]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSessionsServiceClient_GetActivity_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetActivity'
type MockSessionsServiceClient_GetActivity_Call struct {
	*mock.Call
}

// GetActivity is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *connect.Request[node.EmptyMessage]
func (_e *MockSessionsServiceClient_Expecter) GetActivity(_a0 interface{}, _a1 interface{}) *MockSessionsServiceClient_GetActivity_Call {
	return &MockSessionsServiceClient_GetActivity_Call{Call: _e.mock.On("GetActivity", _a0, _a1)}
}

func (_c *MockSessionsServiceClient_GetActivity_Call) Run(run func(_a0 context.Context, _a1 *connect.Request[node.EmptyMessage])) *MockSessionsServiceClient_GetActivity_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connect.Request[node.EmptyMessage]))
	})
	return _c
}

func (_c *MockSessionsServiceClient_GetActivity_Call) Return(_a0 *connect.Response[sessions.Activity], _a1 error) *MockSessionsServiceClient_GetActivity_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSessionsServiceClient_GetActivity_Call) RunAndReturn(run func(context.Context, *connect.Request[node.EmptyMessage]) (*connect.Response[sessions.Activity], error)) *MockSessionsServiceClient_GetActivity_Call {
	_c.Call.Return(run)
	return _c
}

// Revoke provides a mock function with given fields: _a0, _a1
func (_m *MockSessionsServiceClient) Revoke(_a0 context.Context, _a1 *connect.Request[sessions.Session]) (*connect.Response[node.DeleteResponse], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Revoke")
	}

	var r0 *connect.Response[node.DeleteResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[sessions.Session]) (*connect.Response[node.DeleteResponse], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[sessions.Session]) *connect.Response[node.DeleteResponse]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[node.DeleteResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[sessions.Session]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSessionsServiceClient_Revoke_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Revoke'
type MockSessionsServiceClient_Revoke_Call struct {
	*mock.Call
}

// Revoke is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *connect.Request[sessions.Session]
func (_e *MockSessionsServiceClient_Expecter) Revoke(_a0 interface{}, _a1 interface{}) *MockSessionsServiceClient_Revoke_Call {
	return &MockSessionsServiceClient_Revoke_Call{Call: _e.mock.On("Revoke", _a0, _a1)}
}

func (_c *MockSessionsServiceClient_Revoke_Call) Run(run func(_a0 context.Context, _a1 *connect.Request[sessions.Session])) *MockSessionsServiceClient_Revoke_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connect.Request[sessions.Session]))
	})
	return _c
}

func (_c *MockSessionsServiceClient_Revoke_Call) Return(_a0 *connect.Response[node.DeleteResponse], _a1 error) *MockSessionsServiceClient_Revoke_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSessionsServiceClient_Revoke_Call) RunAndReturn(run func(context.Context, *connect.Request[sessions.Session]) (*connect.Response[node.DeleteResponse], error)) *MockSessionsServiceClient_Revoke_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSessionsServiceClient creates a new instance of MockSessionsServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSessionsServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSessionsServiceClient {
	mock := &MockSessionsServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
