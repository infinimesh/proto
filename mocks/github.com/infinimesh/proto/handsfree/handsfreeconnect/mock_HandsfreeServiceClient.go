// Code generated by mockery v2.40.1. DO NOT EDIT.

package handsfreeconnect_mocks

import (
	context "context"

	connect "connectrpc.com/connect"

	handsfree "github.com/infinimesh/proto/handsfree"

	mock "github.com/stretchr/testify/mock"
)

// MockHandsfreeServiceClient is an autogenerated mock type for the HandsfreeServiceClient type
type MockHandsfreeServiceClient struct {
	mock.Mock
}

type MockHandsfreeServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockHandsfreeServiceClient) EXPECT() *MockHandsfreeServiceClient_Expecter {
	return &MockHandsfreeServiceClient_Expecter{mock: &_m.Mock}
}

// Connect provides a mock function with given fields: _a0, _a1
func (_m *MockHandsfreeServiceClient) Connect(_a0 context.Context, _a1 *connect.Request[handsfree.ConnectionRequest]) (*connect.ServerStreamForClient[handsfree.ControlPacket], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Connect")
	}

	var r0 *connect.ServerStreamForClient[handsfree.ControlPacket]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[handsfree.ConnectionRequest]) (*connect.ServerStreamForClient[handsfree.ControlPacket], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[handsfree.ConnectionRequest]) *connect.ServerStreamForClient[handsfree.ControlPacket]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.ServerStreamForClient[handsfree.ControlPacket])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[handsfree.ConnectionRequest]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockHandsfreeServiceClient_Connect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Connect'
type MockHandsfreeServiceClient_Connect_Call struct {
	*mock.Call
}

// Connect is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *connect.Request[handsfree.ConnectionRequest]
func (_e *MockHandsfreeServiceClient_Expecter) Connect(_a0 interface{}, _a1 interface{}) *MockHandsfreeServiceClient_Connect_Call {
	return &MockHandsfreeServiceClient_Connect_Call{Call: _e.mock.On("Connect", _a0, _a1)}
}

func (_c *MockHandsfreeServiceClient_Connect_Call) Run(run func(_a0 context.Context, _a1 *connect.Request[handsfree.ConnectionRequest])) *MockHandsfreeServiceClient_Connect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connect.Request[handsfree.ConnectionRequest]))
	})
	return _c
}

func (_c *MockHandsfreeServiceClient_Connect_Call) Return(_a0 *connect.ServerStreamForClient[handsfree.ControlPacket], _a1 error) *MockHandsfreeServiceClient_Connect_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockHandsfreeServiceClient_Connect_Call) RunAndReturn(run func(context.Context, *connect.Request[handsfree.ConnectionRequest]) (*connect.ServerStreamForClient[handsfree.ControlPacket], error)) *MockHandsfreeServiceClient_Connect_Call {
	_c.Call.Return(run)
	return _c
}

// Send provides a mock function with given fields: _a0, _a1
func (_m *MockHandsfreeServiceClient) Send(_a0 context.Context, _a1 *connect.Request[handsfree.ControlPacket]) (*connect.Response[handsfree.ControlPacket], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Send")
	}

	var r0 *connect.Response[handsfree.ControlPacket]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[handsfree.ControlPacket]) (*connect.Response[handsfree.ControlPacket], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[handsfree.ControlPacket]) *connect.Response[handsfree.ControlPacket]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[handsfree.ControlPacket])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[handsfree.ControlPacket]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockHandsfreeServiceClient_Send_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Send'
type MockHandsfreeServiceClient_Send_Call struct {
	*mock.Call
}

// Send is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *connect.Request[handsfree.ControlPacket]
func (_e *MockHandsfreeServiceClient_Expecter) Send(_a0 interface{}, _a1 interface{}) *MockHandsfreeServiceClient_Send_Call {
	return &MockHandsfreeServiceClient_Send_Call{Call: _e.mock.On("Send", _a0, _a1)}
}

func (_c *MockHandsfreeServiceClient_Send_Call) Run(run func(_a0 context.Context, _a1 *connect.Request[handsfree.ControlPacket])) *MockHandsfreeServiceClient_Send_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connect.Request[handsfree.ControlPacket]))
	})
	return _c
}

func (_c *MockHandsfreeServiceClient_Send_Call) Return(_a0 *connect.Response[handsfree.ControlPacket], _a1 error) *MockHandsfreeServiceClient_Send_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockHandsfreeServiceClient_Send_Call) RunAndReturn(run func(context.Context, *connect.Request[handsfree.ControlPacket]) (*connect.Response[handsfree.ControlPacket], error)) *MockHandsfreeServiceClient_Send_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockHandsfreeServiceClient creates a new instance of MockHandsfreeServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockHandsfreeServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockHandsfreeServiceClient {
	mock := &MockHandsfreeServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
