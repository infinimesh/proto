// Code generated by mockery v2.40.1. DO NOT EDIT.

package timeseriesconnect_mocks

import (
	context "context"

	connect "connectrpc.com/connect"

	mock "github.com/stretchr/testify/mock"

	timeseries "github.com/infinimesh/proto/timeseries"
)

// MockTimeseriesServiceClient is an autogenerated mock type for the TimeseriesServiceClient type
type MockTimeseriesServiceClient struct {
	mock.Mock
}

type MockTimeseriesServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTimeseriesServiceClient) EXPECT() *MockTimeseriesServiceClient_Expecter {
	return &MockTimeseriesServiceClient_Expecter{mock: &_m.Mock}
}

// Flush provides a mock function with given fields: _a0, _a1
func (_m *MockTimeseriesServiceClient) Flush(_a0 context.Context, _a1 *connect.Request[timeseries.FlushRequest]) (*connect.Response[timeseries.FlushResponse], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Flush")
	}

	var r0 *connect.Response[timeseries.FlushResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[timeseries.FlushRequest]) (*connect.Response[timeseries.FlushResponse], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[timeseries.FlushRequest]) *connect.Response[timeseries.FlushResponse]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[timeseries.FlushResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[timeseries.FlushRequest]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTimeseriesServiceClient_Flush_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Flush'
type MockTimeseriesServiceClient_Flush_Call struct {
	*mock.Call
}

// Flush is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *connect.Request[timeseries.FlushRequest]
func (_e *MockTimeseriesServiceClient_Expecter) Flush(_a0 interface{}, _a1 interface{}) *MockTimeseriesServiceClient_Flush_Call {
	return &MockTimeseriesServiceClient_Flush_Call{Call: _e.mock.On("Flush", _a0, _a1)}
}

func (_c *MockTimeseriesServiceClient_Flush_Call) Run(run func(_a0 context.Context, _a1 *connect.Request[timeseries.FlushRequest])) *MockTimeseriesServiceClient_Flush_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connect.Request[timeseries.FlushRequest]))
	})
	return _c
}

func (_c *MockTimeseriesServiceClient_Flush_Call) Return(_a0 *connect.Response[timeseries.FlushResponse], _a1 error) *MockTimeseriesServiceClient_Flush_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTimeseriesServiceClient_Flush_Call) RunAndReturn(run func(context.Context, *connect.Request[timeseries.FlushRequest]) (*connect.Response[timeseries.FlushResponse], error)) *MockTimeseriesServiceClient_Flush_Call {
	_c.Call.Return(run)
	return _c
}

// Read provides a mock function with given fields: _a0, _a1
func (_m *MockTimeseriesServiceClient) Read(_a0 context.Context, _a1 *connect.Request[timeseries.ReadRequest]) (*connect.Response[timeseries.ReadResponse], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Read")
	}

	var r0 *connect.Response[timeseries.ReadResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[timeseries.ReadRequest]) (*connect.Response[timeseries.ReadResponse], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[timeseries.ReadRequest]) *connect.Response[timeseries.ReadResponse]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[timeseries.ReadResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[timeseries.ReadRequest]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTimeseriesServiceClient_Read_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Read'
type MockTimeseriesServiceClient_Read_Call struct {
	*mock.Call
}

// Read is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *connect.Request[timeseries.ReadRequest]
func (_e *MockTimeseriesServiceClient_Expecter) Read(_a0 interface{}, _a1 interface{}) *MockTimeseriesServiceClient_Read_Call {
	return &MockTimeseriesServiceClient_Read_Call{Call: _e.mock.On("Read", _a0, _a1)}
}

func (_c *MockTimeseriesServiceClient_Read_Call) Run(run func(_a0 context.Context, _a1 *connect.Request[timeseries.ReadRequest])) *MockTimeseriesServiceClient_Read_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connect.Request[timeseries.ReadRequest]))
	})
	return _c
}

func (_c *MockTimeseriesServiceClient_Read_Call) Return(_a0 *connect.Response[timeseries.ReadResponse], _a1 error) *MockTimeseriesServiceClient_Read_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTimeseriesServiceClient_Read_Call) RunAndReturn(run func(context.Context, *connect.Request[timeseries.ReadRequest]) (*connect.Response[timeseries.ReadResponse], error)) *MockTimeseriesServiceClient_Read_Call {
	_c.Call.Return(run)
	return _c
}

// Stat provides a mock function with given fields: _a0, _a1
func (_m *MockTimeseriesServiceClient) Stat(_a0 context.Context, _a1 *connect.Request[timeseries.StatRequest]) (*connect.Response[timeseries.StatResponse], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Stat")
	}

	var r0 *connect.Response[timeseries.StatResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[timeseries.StatRequest]) (*connect.Response[timeseries.StatResponse], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[timeseries.StatRequest]) *connect.Response[timeseries.StatResponse]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[timeseries.StatResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[timeseries.StatRequest]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTimeseriesServiceClient_Stat_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stat'
type MockTimeseriesServiceClient_Stat_Call struct {
	*mock.Call
}

// Stat is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *connect.Request[timeseries.StatRequest]
func (_e *MockTimeseriesServiceClient_Expecter) Stat(_a0 interface{}, _a1 interface{}) *MockTimeseriesServiceClient_Stat_Call {
	return &MockTimeseriesServiceClient_Stat_Call{Call: _e.mock.On("Stat", _a0, _a1)}
}

func (_c *MockTimeseriesServiceClient_Stat_Call) Run(run func(_a0 context.Context, _a1 *connect.Request[timeseries.StatRequest])) *MockTimeseriesServiceClient_Stat_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connect.Request[timeseries.StatRequest]))
	})
	return _c
}

func (_c *MockTimeseriesServiceClient_Stat_Call) Return(_a0 *connect.Response[timeseries.StatResponse], _a1 error) *MockTimeseriesServiceClient_Stat_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTimeseriesServiceClient_Stat_Call) RunAndReturn(run func(context.Context, *connect.Request[timeseries.StatRequest]) (*connect.Response[timeseries.StatResponse], error)) *MockTimeseriesServiceClient_Stat_Call {
	_c.Call.Return(run)
	return _c
}

// Write provides a mock function with given fields: _a0, _a1
func (_m *MockTimeseriesServiceClient) Write(_a0 context.Context, _a1 *connect.Request[timeseries.WriteRequest]) (*connect.Response[timeseries.WriteResponse], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Write")
	}

	var r0 *connect.Response[timeseries.WriteResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[timeseries.WriteRequest]) (*connect.Response[timeseries.WriteResponse], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[timeseries.WriteRequest]) *connect.Response[timeseries.WriteResponse]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[timeseries.WriteResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[timeseries.WriteRequest]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTimeseriesServiceClient_Write_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Write'
type MockTimeseriesServiceClient_Write_Call struct {
	*mock.Call
}

// Write is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *connect.Request[timeseries.WriteRequest]
func (_e *MockTimeseriesServiceClient_Expecter) Write(_a0 interface{}, _a1 interface{}) *MockTimeseriesServiceClient_Write_Call {
	return &MockTimeseriesServiceClient_Write_Call{Call: _e.mock.On("Write", _a0, _a1)}
}

func (_c *MockTimeseriesServiceClient_Write_Call) Run(run func(_a0 context.Context, _a1 *connect.Request[timeseries.WriteRequest])) *MockTimeseriesServiceClient_Write_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connect.Request[timeseries.WriteRequest]))
	})
	return _c
}

func (_c *MockTimeseriesServiceClient_Write_Call) Return(_a0 *connect.Response[timeseries.WriteResponse], _a1 error) *MockTimeseriesServiceClient_Write_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTimeseriesServiceClient_Write_Call) RunAndReturn(run func(context.Context, *connect.Request[timeseries.WriteRequest]) (*connect.Response[timeseries.WriteResponse], error)) *MockTimeseriesServiceClient_Write_Call {
	_c.Call.Return(run)
	return _c
}

// WriteBulk provides a mock function with given fields: _a0, _a1
func (_m *MockTimeseriesServiceClient) WriteBulk(_a0 context.Context, _a1 *connect.Request[timeseries.WriteBulkRequest]) (*connect.Response[timeseries.WriteBulkResponse], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for WriteBulk")
	}

	var r0 *connect.Response[timeseries.WriteBulkResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[timeseries.WriteBulkRequest]) (*connect.Response[timeseries.WriteBulkResponse], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[timeseries.WriteBulkRequest]) *connect.Response[timeseries.WriteBulkResponse]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[timeseries.WriteBulkResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[timeseries.WriteBulkRequest]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTimeseriesServiceClient_WriteBulk_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteBulk'
type MockTimeseriesServiceClient_WriteBulk_Call struct {
	*mock.Call
}

// WriteBulk is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *connect.Request[timeseries.WriteBulkRequest]
func (_e *MockTimeseriesServiceClient_Expecter) WriteBulk(_a0 interface{}, _a1 interface{}) *MockTimeseriesServiceClient_WriteBulk_Call {
	return &MockTimeseriesServiceClient_WriteBulk_Call{Call: _e.mock.On("WriteBulk", _a0, _a1)}
}

func (_c *MockTimeseriesServiceClient_WriteBulk_Call) Run(run func(_a0 context.Context, _a1 *connect.Request[timeseries.WriteBulkRequest])) *MockTimeseriesServiceClient_WriteBulk_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connect.Request[timeseries.WriteBulkRequest]))
	})
	return _c
}

func (_c *MockTimeseriesServiceClient_WriteBulk_Call) Return(_a0 *connect.Response[timeseries.WriteBulkResponse], _a1 error) *MockTimeseriesServiceClient_WriteBulk_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTimeseriesServiceClient_WriteBulk_Call) RunAndReturn(run func(context.Context, *connect.Request[timeseries.WriteBulkRequest]) (*connect.Response[timeseries.WriteBulkResponse], error)) *MockTimeseriesServiceClient_WriteBulk_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTimeseriesServiceClient creates a new instance of MockTimeseriesServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTimeseriesServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTimeseriesServiceClient {
	mock := &MockTimeseriesServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
