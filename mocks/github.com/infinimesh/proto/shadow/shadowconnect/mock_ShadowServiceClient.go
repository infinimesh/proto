// Code generated by mockery v2.40.1. DO NOT EDIT.

package shadowconnect_mocks

import (
	context "context"

	connect "connectrpc.com/connect"

	mock "github.com/stretchr/testify/mock"

	shadow "github.com/infinimesh/proto/shadow"
)

// MockShadowServiceClient is an autogenerated mock type for the ShadowServiceClient type
type MockShadowServiceClient struct {
	mock.Mock
}

type MockShadowServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockShadowServiceClient) EXPECT() *MockShadowServiceClient_Expecter {
	return &MockShadowServiceClient_Expecter{mock: &_m.Mock}
}

// Get provides a mock function with given fields: _a0, _a1
func (_m *MockShadowServiceClient) Get(_a0 context.Context, _a1 *connect.Request[shadow.GetRequest]) (*connect.Response[shadow.GetResponse], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *connect.Response[shadow.GetResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[shadow.GetRequest]) (*connect.Response[shadow.GetResponse], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[shadow.GetRequest]) *connect.Response[shadow.GetResponse]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[shadow.GetResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[shadow.GetRequest]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockShadowServiceClient_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockShadowServiceClient_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *connect.Request[shadow.GetRequest]
func (_e *MockShadowServiceClient_Expecter) Get(_a0 interface{}, _a1 interface{}) *MockShadowServiceClient_Get_Call {
	return &MockShadowServiceClient_Get_Call{Call: _e.mock.On("Get", _a0, _a1)}
}

func (_c *MockShadowServiceClient_Get_Call) Run(run func(_a0 context.Context, _a1 *connect.Request[shadow.GetRequest])) *MockShadowServiceClient_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connect.Request[shadow.GetRequest]))
	})
	return _c
}

func (_c *MockShadowServiceClient_Get_Call) Return(_a0 *connect.Response[shadow.GetResponse], _a1 error) *MockShadowServiceClient_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockShadowServiceClient_Get_Call) RunAndReturn(run func(context.Context, *connect.Request[shadow.GetRequest]) (*connect.Response[shadow.GetResponse], error)) *MockShadowServiceClient_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Patch provides a mock function with given fields: _a0, _a1
func (_m *MockShadowServiceClient) Patch(_a0 context.Context, _a1 *connect.Request[shadow.Shadow]) (*connect.Response[shadow.Shadow], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Patch")
	}

	var r0 *connect.Response[shadow.Shadow]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[shadow.Shadow]) (*connect.Response[shadow.Shadow], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[shadow.Shadow]) *connect.Response[shadow.Shadow]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[shadow.Shadow])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[shadow.Shadow]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockShadowServiceClient_Patch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Patch'
type MockShadowServiceClient_Patch_Call struct {
	*mock.Call
}

// Patch is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *connect.Request[shadow.Shadow]
func (_e *MockShadowServiceClient_Expecter) Patch(_a0 interface{}, _a1 interface{}) *MockShadowServiceClient_Patch_Call {
	return &MockShadowServiceClient_Patch_Call{Call: _e.mock.On("Patch", _a0, _a1)}
}

func (_c *MockShadowServiceClient_Patch_Call) Run(run func(_a0 context.Context, _a1 *connect.Request[shadow.Shadow])) *MockShadowServiceClient_Patch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connect.Request[shadow.Shadow]))
	})
	return _c
}

func (_c *MockShadowServiceClient_Patch_Call) Return(_a0 *connect.Response[shadow.Shadow], _a1 error) *MockShadowServiceClient_Patch_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockShadowServiceClient_Patch_Call) RunAndReturn(run func(context.Context, *connect.Request[shadow.Shadow]) (*connect.Response[shadow.Shadow], error)) *MockShadowServiceClient_Patch_Call {
	_c.Call.Return(run)
	return _c
}

// Remove provides a mock function with given fields: _a0, _a1
func (_m *MockShadowServiceClient) Remove(_a0 context.Context, _a1 *connect.Request[shadow.RemoveRequest]) (*connect.Response[shadow.Shadow], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Remove")
	}

	var r0 *connect.Response[shadow.Shadow]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[shadow.RemoveRequest]) (*connect.Response[shadow.Shadow], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[shadow.RemoveRequest]) *connect.Response[shadow.Shadow]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[shadow.Shadow])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[shadow.RemoveRequest]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockShadowServiceClient_Remove_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Remove'
type MockShadowServiceClient_Remove_Call struct {
	*mock.Call
}

// Remove is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *connect.Request[shadow.RemoveRequest]
func (_e *MockShadowServiceClient_Expecter) Remove(_a0 interface{}, _a1 interface{}) *MockShadowServiceClient_Remove_Call {
	return &MockShadowServiceClient_Remove_Call{Call: _e.mock.On("Remove", _a0, _a1)}
}

func (_c *MockShadowServiceClient_Remove_Call) Run(run func(_a0 context.Context, _a1 *connect.Request[shadow.RemoveRequest])) *MockShadowServiceClient_Remove_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connect.Request[shadow.RemoveRequest]))
	})
	return _c
}

func (_c *MockShadowServiceClient_Remove_Call) Return(_a0 *connect.Response[shadow.Shadow], _a1 error) *MockShadowServiceClient_Remove_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockShadowServiceClient_Remove_Call) RunAndReturn(run func(context.Context, *connect.Request[shadow.RemoveRequest]) (*connect.Response[shadow.Shadow], error)) *MockShadowServiceClient_Remove_Call {
	_c.Call.Return(run)
	return _c
}

// StreamShadow provides a mock function with given fields: _a0, _a1
func (_m *MockShadowServiceClient) StreamShadow(_a0 context.Context, _a1 *connect.Request[shadow.StreamShadowRequest]) (*connect.ServerStreamForClient[shadow.Shadow], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for StreamShadow")
	}

	var r0 *connect.ServerStreamForClient[shadow.Shadow]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[shadow.StreamShadowRequest]) (*connect.ServerStreamForClient[shadow.Shadow], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[shadow.StreamShadowRequest]) *connect.ServerStreamForClient[shadow.Shadow]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.ServerStreamForClient[shadow.Shadow])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[shadow.StreamShadowRequest]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockShadowServiceClient_StreamShadow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StreamShadow'
type MockShadowServiceClient_StreamShadow_Call struct {
	*mock.Call
}

// StreamShadow is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *connect.Request[shadow.StreamShadowRequest]
func (_e *MockShadowServiceClient_Expecter) StreamShadow(_a0 interface{}, _a1 interface{}) *MockShadowServiceClient_StreamShadow_Call {
	return &MockShadowServiceClient_StreamShadow_Call{Call: _e.mock.On("StreamShadow", _a0, _a1)}
}

func (_c *MockShadowServiceClient_StreamShadow_Call) Run(run func(_a0 context.Context, _a1 *connect.Request[shadow.StreamShadowRequest])) *MockShadowServiceClient_StreamShadow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connect.Request[shadow.StreamShadowRequest]))
	})
	return _c
}

func (_c *MockShadowServiceClient_StreamShadow_Call) Return(_a0 *connect.ServerStreamForClient[shadow.Shadow], _a1 error) *MockShadowServiceClient_StreamShadow_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockShadowServiceClient_StreamShadow_Call) RunAndReturn(run func(context.Context, *connect.Request[shadow.StreamShadowRequest]) (*connect.ServerStreamForClient[shadow.Shadow], error)) *MockShadowServiceClient_StreamShadow_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockShadowServiceClient creates a new instance of MockShadowServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockShadowServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockShadowServiceClient {
	mock := &MockShadowServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
