//
//Copyright Â© 2021-2023 Infinite Devices GmbH
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: shadow/shadow.proto

package shadowconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	shadow "github.com/infinimesh/proto/shadow"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ShadowServiceName is the fully-qualified name of the ShadowService service.
	ShadowServiceName = "infinimesh.shadow.ShadowService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ShadowServiceGetProcedure is the fully-qualified name of the ShadowService's Get RPC.
	ShadowServiceGetProcedure = "/infinimesh.shadow.ShadowService/Get"
	// ShadowServicePatchProcedure is the fully-qualified name of the ShadowService's Patch RPC.
	ShadowServicePatchProcedure = "/infinimesh.shadow.ShadowService/Patch"
	// ShadowServiceRemoveProcedure is the fully-qualified name of the ShadowService's Remove RPC.
	ShadowServiceRemoveProcedure = "/infinimesh.shadow.ShadowService/Remove"
	// ShadowServiceStreamShadowProcedure is the fully-qualified name of the ShadowService's
	// StreamShadow RPC.
	ShadowServiceStreamShadowProcedure = "/infinimesh.shadow.ShadowService/StreamShadow"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	shadowServiceServiceDescriptor            = shadow.File_shadow_shadow_proto.Services().ByName("ShadowService")
	shadowServiceGetMethodDescriptor          = shadowServiceServiceDescriptor.Methods().ByName("Get")
	shadowServicePatchMethodDescriptor        = shadowServiceServiceDescriptor.Methods().ByName("Patch")
	shadowServiceRemoveMethodDescriptor       = shadowServiceServiceDescriptor.Methods().ByName("Remove")
	shadowServiceStreamShadowMethodDescriptor = shadowServiceServiceDescriptor.Methods().ByName("StreamShadow")
)

// ShadowServiceClient is a client for the infinimesh.shadow.ShadowService service.
type ShadowServiceClient interface {
	Get(context.Context, *connect.Request[shadow.GetRequest]) (*connect.Response[shadow.GetResponse], error)
	Patch(context.Context, *connect.Request[shadow.Shadow]) (*connect.Response[shadow.Shadow], error)
	Remove(context.Context, *connect.Request[shadow.RemoveRequest]) (*connect.Response[shadow.Shadow], error)
	StreamShadow(context.Context, *connect.Request[shadow.StreamShadowRequest]) (*connect.ServerStreamForClient[shadow.Shadow], error)
}

// NewShadowServiceClient constructs a client for the infinimesh.shadow.ShadowService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewShadowServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ShadowServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &shadowServiceClient{
		get: connect.NewClient[shadow.GetRequest, shadow.GetResponse](
			httpClient,
			baseURL+ShadowServiceGetProcedure,
			connect.WithSchema(shadowServiceGetMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		patch: connect.NewClient[shadow.Shadow, shadow.Shadow](
			httpClient,
			baseURL+ShadowServicePatchProcedure,
			connect.WithSchema(shadowServicePatchMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		remove: connect.NewClient[shadow.RemoveRequest, shadow.Shadow](
			httpClient,
			baseURL+ShadowServiceRemoveProcedure,
			connect.WithSchema(shadowServiceRemoveMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		streamShadow: connect.NewClient[shadow.StreamShadowRequest, shadow.Shadow](
			httpClient,
			baseURL+ShadowServiceStreamShadowProcedure,
			connect.WithSchema(shadowServiceStreamShadowMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// shadowServiceClient implements ShadowServiceClient.
type shadowServiceClient struct {
	get          *connect.Client[shadow.GetRequest, shadow.GetResponse]
	patch        *connect.Client[shadow.Shadow, shadow.Shadow]
	remove       *connect.Client[shadow.RemoveRequest, shadow.Shadow]
	streamShadow *connect.Client[shadow.StreamShadowRequest, shadow.Shadow]
}

// Get calls infinimesh.shadow.ShadowService.Get.
func (c *shadowServiceClient) Get(ctx context.Context, req *connect.Request[shadow.GetRequest]) (*connect.Response[shadow.GetResponse], error) {
	return c.get.CallUnary(ctx, req)
}

// Patch calls infinimesh.shadow.ShadowService.Patch.
func (c *shadowServiceClient) Patch(ctx context.Context, req *connect.Request[shadow.Shadow]) (*connect.Response[shadow.Shadow], error) {
	return c.patch.CallUnary(ctx, req)
}

// Remove calls infinimesh.shadow.ShadowService.Remove.
func (c *shadowServiceClient) Remove(ctx context.Context, req *connect.Request[shadow.RemoveRequest]) (*connect.Response[shadow.Shadow], error) {
	return c.remove.CallUnary(ctx, req)
}

// StreamShadow calls infinimesh.shadow.ShadowService.StreamShadow.
func (c *shadowServiceClient) StreamShadow(ctx context.Context, req *connect.Request[shadow.StreamShadowRequest]) (*connect.ServerStreamForClient[shadow.Shadow], error) {
	return c.streamShadow.CallServerStream(ctx, req)
}

// ShadowServiceHandler is an implementation of the infinimesh.shadow.ShadowService service.
type ShadowServiceHandler interface {
	Get(context.Context, *connect.Request[shadow.GetRequest]) (*connect.Response[shadow.GetResponse], error)
	Patch(context.Context, *connect.Request[shadow.Shadow]) (*connect.Response[shadow.Shadow], error)
	Remove(context.Context, *connect.Request[shadow.RemoveRequest]) (*connect.Response[shadow.Shadow], error)
	StreamShadow(context.Context, *connect.Request[shadow.StreamShadowRequest], *connect.ServerStream[shadow.Shadow]) error
}

// NewShadowServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewShadowServiceHandler(svc ShadowServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	shadowServiceGetHandler := connect.NewUnaryHandler(
		ShadowServiceGetProcedure,
		svc.Get,
		connect.WithSchema(shadowServiceGetMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	shadowServicePatchHandler := connect.NewUnaryHandler(
		ShadowServicePatchProcedure,
		svc.Patch,
		connect.WithSchema(shadowServicePatchMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	shadowServiceRemoveHandler := connect.NewUnaryHandler(
		ShadowServiceRemoveProcedure,
		svc.Remove,
		connect.WithSchema(shadowServiceRemoveMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	shadowServiceStreamShadowHandler := connect.NewServerStreamHandler(
		ShadowServiceStreamShadowProcedure,
		svc.StreamShadow,
		connect.WithSchema(shadowServiceStreamShadowMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/infinimesh.shadow.ShadowService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ShadowServiceGetProcedure:
			shadowServiceGetHandler.ServeHTTP(w, r)
		case ShadowServicePatchProcedure:
			shadowServicePatchHandler.ServeHTTP(w, r)
		case ShadowServiceRemoveProcedure:
			shadowServiceRemoveHandler.ServeHTTP(w, r)
		case ShadowServiceStreamShadowProcedure:
			shadowServiceStreamShadowHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedShadowServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedShadowServiceHandler struct{}

func (UnimplementedShadowServiceHandler) Get(context.Context, *connect.Request[shadow.GetRequest]) (*connect.Response[shadow.GetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("infinimesh.shadow.ShadowService.Get is not implemented"))
}

func (UnimplementedShadowServiceHandler) Patch(context.Context, *connect.Request[shadow.Shadow]) (*connect.Response[shadow.Shadow], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("infinimesh.shadow.ShadowService.Patch is not implemented"))
}

func (UnimplementedShadowServiceHandler) Remove(context.Context, *connect.Request[shadow.RemoveRequest]) (*connect.Response[shadow.Shadow], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("infinimesh.shadow.ShadowService.Remove is not implemented"))
}

func (UnimplementedShadowServiceHandler) StreamShadow(context.Context, *connect.Request[shadow.StreamShadowRequest], *connect.ServerStream[shadow.Shadow]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("infinimesh.shadow.ShadowService.StreamShadow is not implemented"))
}
